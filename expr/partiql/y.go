// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const UNPIVOT = 57369
const AT = 57370
const PARTITION = 57371
const VALUE = 57372
const COALESCE = 57373
const NULLIF = 57374
const EXTRACT = 57375
const DATE_TRUNC = 57376
const CAST = 57377
const UTCNOW = 57378
const DATE_ADD = 57379
const DATE_DIFF = 57380
const EARLIEST = 57381
const LATEST = 57382
const JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const CROSS = 57386
const INNER = 57387
const OUTER = 57388
const FULL = 57389
const ON = 57390
const AGGREGATE = 57391
const ID = 57392
const NULL = 57393
const TRUE = 57394
const FALSE = 57395
const MISSING = 57396
const OR = 57397
const AND = 57398
const NOT = 57399
const BETWEEN = 57400
const CASE = 57401
const WHEN = 57402
const THEN = 57403
const ELSE = 57404
const END = 57405
const TO = 57406
const EQ = 57407
const NE = 57408
const LT = 57409
const LE = 57410
const GT = 57411
const GE = 57412
const SIMILAR = 57413
const REGEXP_MATCH_CI = 57414
const ILIKE = 57415
const LIKE = 57416
const IN = 57417
const IS = 57418
const OVER = 57419
const FILTER = 57420
const SHIFT_LEFT_LOGICAL = 57421
const SHIFT_RIGHT_ARITHMETIC = 57422
const SHIFT_RIGHT_LOGICAL = 57423
const CONCAT = 57424
const APPEND = 57425
const NEGATION_PRECEDENCE = 57426
const NUMBER = 57427
const ION = 57428
const STRING = 57429

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"UNPIVOT",
	"AT",
	"PARTITION",
	"VALUE",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 335,
	62, 68,
	63, 68,
	65, 68,
	66, 68,
	67, 68,
	74, 68,
	75, 68,
	76, 68,
	77, 68,
	78, 68,
	79, 68,
	-2, 123,
}

const yyPrivate = 57344

const yyLast = 1548

var yyAct = [...]int16{
	15, 329, 333, 309, 185, 320, 255, 289, 172, 13,
	202, 296, 272, 120, 98, 115, 18, 9, 14, 29,
	197, 109, 270, 116, 7, 222, 11, 221, 219, 218,
	216, 145, 103, 104, 105, 56, 144, 107, 142, 110,
	113, 8, 38, 141, 66, 67, 68, 69, 70, 44,
	42, 43, 45, 186, 187, 101, 69, 70, 273, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 123, 119, 125, 126, 297, 146, 147, 148,
	149, 150, 151, 220, 99, 158, 159, 101, 229, 167,
	171, 173, 175, 176, 41, 47, 46, 143, 89, 152,
	173, 217, 125, 100, 244, 169, 187, 170, 183, 64,
	65, 66, 67, 68, 69, 70, 156, 195, 199, 243,
	184, 48, 196, 353, 188, 234, 268, 193, 173, 192,
	194, 155, 157, 154, 153, 100, 215, 253, 252, 310,
	200, 213, 234, 241, 30, 160, 163, 164, 162, 214,
	36, 234, 233, 161, 21, 22, 27, 26, 23, 28,
	24, 25, 223, 225, 226, 224, 227, 166, 301, 122,
	230, 231, 19, 8, 38, 267, 124, 39, 254, 40,
	234, 44, 42, 43, 45, 245, 228, 201, 33, 32,
	191, 20, 181, 340, 249, 54, 53, 239, 251, 242,
	238, 237, 248, 6, 257, 315, 298, 127, 118, 246,
	247, 250, 8, 53, 117, 102, 97, 96, 31, 16,
	95, 94, 93, 258, 259, 92, 41, 47, 46, 278,
	53, 91, 90, 275, 269, 276, 277, 125, 279, 280,
	281, 282, 59, 60, 61, 63, 62, 64, 65, 66,
	67, 68, 69, 70, 288, 87, 51, 180, 283, 284,
	179, 178, 287, 60, 61, 63, 62, 64, 65, 66,
	67, 68, 69, 70, 177, 299, 208, 210, 211, 207,
	209, 292, 212, 264, 295, 49, 294, 206, 265, 262,
	293, 311, 266, 313, 263, 261, 260, 324, 308, 285,
	189, 312, 286, 317, 318, 306, 307, 314, 190, 351,
	352, 348, 342, 343, 50, 319, 12, 325, 10, 4,
	330, 321, 290, 334, 335, 336, 331, 328, 322, 291,
	310, 256, 338, 316, 203, 339, 240, 173, 122, 111,
	5, 334, 204, 346, 345, 344, 88, 350, 349, 85,
	84, 205, 74, 83, 82, 332, 198, 114, 112, 121,
	165, 76, 77, 78, 79, 80, 81, 73, 75, 71,
	72, 57, 86, 347, 111, 58, 59, 60, 61, 63,
	62, 64, 65, 66, 67, 68, 69, 70, 30, 341,
	3, 2, 34, 35, 106, 17, 108, 168, 21, 22,
	27, 26, 23, 28, 24, 25, 61, 63, 62, 64,
	65, 66, 67, 68, 69, 70, 19, 8, 38, 52,
	37, 39, 1, 40, 0, 44, 42, 43, 45, 0,
	0, 0, 33, 32, 0, 20, 73, 75, 71, 72,
	57, 86, 0, 0, 58, 59, 60, 61, 63, 62,
	64, 65, 66, 67, 68, 69, 70, 0, 0, 0,
	0, 0, 31, 174, 30, 0, 0, 0, 0, 0,
	41, 47, 46, 0, 21, 22, 27, 26, 23, 28,
	24, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 19, 8, 38, 0, 182, 39, 55, 40,
	0, 44, 42, 43, 45, 0, 0, 0, 33, 32,
	0, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 174,
	85, 84, 0, 74, 83, 82, 41, 47, 46, 0,
	0, 0, 76, 77, 78, 79, 80, 81, 73, 75,
	71, 72, 57, 86, 0, 0, 58, 59, 60, 61,
	63, 62, 64, 65, 66, 67, 68, 69, 70, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	22, 27, 26, 23, 28, 24, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19, 8, 38,
	0, 0, 39, 0, 40, 0, 44, 42, 43, 45,
	0, 0, 0, 33, 32, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 0,
	0, 0, 0, 31, 174, 85, 84, 0, 74, 83,
	82, 41, 47, 46, 0, 0, 0, 76, 77, 78,
	79, 80, 81, 73, 75, 71, 72, 57, 86, 0,
	0, 58, 59, 60, 61, 63, 62, 64, 65, 66,
	67, 68, 69, 70, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 84, 0, 74, 83, 82, 0,
	0, 0, 0, 0, 0, 76, 77, 78, 79, 80,
	81, 73, 75, 71, 72, 57, 86, 0, 0, 58,
	59, 60, 61, 63, 62, 64, 65, 66, 67, 68,
	69, 70, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 84, 0, 74, 83, 82, 0, 0, 0,
	0, 0, 0, 76, 77, 78, 79, 80, 81, 73,
	75, 71, 72, 57, 86, 0, 0, 58, 59, 60,
	61, 63, 62, 64, 65, 66, 67, 68, 69, 70,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	84, 0, 74, 83, 82, 0, 0, 0, 0, 0,
	0, 76, 77, 78, 79, 80, 81, 73, 75, 71,
	72, 57, 86, 0, 0, 58, 59, 60, 61, 63,
	62, 64, 65, 66, 67, 68, 69, 70, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 84, 0,
	74, 83, 82, 0, 0, 0, 0, 0, 0, 76,
	77, 78, 79, 80, 81, 73, 75, 71, 72, 57,
	86, 0, 0, 58, 59, 60, 61, 63, 62, 64,
	65, 66, 67, 68, 69, 70, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 84, 0, 74,
	83, 82, 0, 0, 0, 0, 0, 0, 76, 77,
	78, 79, 80, 81, 73, 75, 71, 72, 57, 86,
	0, 0, 58, 59, 60, 61, 63, 62, 64, 65,
	66, 67, 68, 69, 70, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 84, 0, 74, 83,
	82, 0, 0, 0, 0, 0, 0, 76, 77, 78,
	79, 80, 81, 73, 75, 71, 72, 57, 86, 0,
	0, 58, 59, 60, 61, 63, 62, 64, 65, 66,
	67, 68, 69, 70, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 84, 0, 74, 83, 82, 0,
	0, 0, 0, 0, 0, 76, 77, 78, 79, 80,
	81, 73, 75, 71, 72, 57, 86, 0, 0, 58,
	59, 60, 61, 63, 62, 64, 65, 66, 67, 68,
	69, 70, 85, 84, 0, 74, 83, 82, 0, 0,
	274, 0, 0, 0, 76, 77, 78, 79, 80, 81,
	73, 75, 71, 72, 57, 86, 0, 0, 58, 59,
	60, 61, 63, 62, 64, 65, 66, 67, 68, 69,
	70, 271, 0, 0, 0, 0, 0, 236, 0, 0,
	85, 84, 0, 74, 83, 82, 0, 0, 0, 0,
	0, 0, 76, 77, 78, 79, 80, 81, 73, 75,
	71, 72, 57, 86, 0, 0, 58, 59, 60, 61,
	63, 62, 64, 65, 66, 67, 68, 69, 70, 85,
	84, 0, 74, 83, 82, 0, 0, 0, 0, 0,
	0, 76, 77, 78, 79, 80, 81, 73, 75, 71,
	72, 57, 86, 0, 0, 58, 59, 60, 61, 63,
	62, 64, 65, 66, 67, 68, 69, 70, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 84,
	0, 74, 83, 82, 0, 0, 0, 0, 0, 0,
	76, 77, 78, 79, 80, 81, 73, 75, 71, 72,
	57, 86, 0, 0, 58, 59, 60, 61, 63, 62,
	64, 65, 66, 67, 68, 69, 70, 85, 84, 0,
	74, 83, 82, 0, 0, 232, 0, 0, 0, 76,
	77, 78, 79, 80, 81, 73, 75, 71, 72, 57,
	86, 0, 111, 58, 59, 60, 61, 63, 62, 64,
	65, 66, 67, 68, 69, 70, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 21, 22, 27, 26,
	23, 28, 24, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 8, 38, 0, 0, 39,
	0, 40, 0, 44, 42, 43, 45, 0, 0, 0,
	33, 32, 0, 20, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 30, 0, 0, 0, 0, 0, 0, 41, 47,
	46, 21, 22, 27, 26, 23, 28, 24, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 19,
	8, 38, 0, 0, 39, 0, 40, 0, 44, 42,
	43, 45, 0, 0, 0, 33, 32, 0, 20, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 85, 84, 0, 74,
	83, 82, 0, 41, 47, 46, 0, 0, 323, 77,
	78, 79, 80, 81, 73, 75, 71, 72, 57, 86,
	0, 0, 58, 59, 60, 61, 63, 62, 64, 65,
	66, 67, 68, 69, 70, 85, 84, 0, 74, 83,
	82, 0, 0, 0, 0, 0, 0, 76, 77, 78,
	79, 80, 81, 73, 75, 71, 72, 57, 86, 0,
	0, 58, 59, 60, 61, 63, 62, 64, 65, 66,
	67, 68, 69, 70, 84, 0, 74, 83, 82, 0,
	0, 0, 0, 0, 0, 76, 77, 78, 79, 80,
	81, 73, 75, 71, 72, 57, 86, 0, 0, 58,
	59, 60, 61, 63, 62, 64, 65, 66, 67, 68,
	69, 70, 74, 83, 82, 0, 0, 0, 0, 0,
	0, 76, 77, 78, 79, 80, 81, 73, 75, 71,
	72, 57, 86, 0, 0, 58, 59, 60, 61, 63,
	62, 64, 65, 66, 67, 68, 69, 70,
}

var yyPact = [...]int16{
	303, -1000, 333, 151, 162, 300, 162, 296, -1000, 123,
	237, 294, 205, 178, -1000, 478, -1000, -1000, -1000, 204,
	29, 181, 180, 174, 171, 170, 169, 166, 165, 33,
	164, 1300, 1300, 1300, -1000, -1000, 1300, -1000, 1225, 1300,
	-82, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 163,
	157, 332, 330, 123, 162, 162, -1000, 156, 1300, 1300,
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
	1300, -62, -67, 24, -69, -74, 1300, 1300, 1300, 1300,
	1300, 1300, -9, 51, 1300, 1300, 87, 71, 36, 1300,
	558, 1300, 1300, 224, 211, 210, 207, 139, -1000, 443,
	162, 3, 332, -1000, 1447, 1447, 280, 1373, 137, -1000,
	1373, 300, 75, 1373, 65, -1000, -86, 1300, 332, 134,
	325, 235, 123, -1000, -1000, 1, -1000, 367, 153, 173,
	315, 15, 15, 15, -52, -52, -43, -43, -43, -1000,
	-1000, -1000, -1000, -75, -1000, -1000, 356, 356, 356, 356,
	356, 356, 38, -76, -77, 10, -78, -80, 1447, 1411,
	-1000, 104, -1000, -1000, -1000, 1300, 133, -1000, 16, 1300,
	1300, 1145, 99, 1373, -1000, 1106, 1057, 149, 148, 145,
	328, -1000, -1000, 90, 1, 64, 49, -1000, 132, 162,
	162, -1000, 123, 1300, -1000, -82, -1000, 1300, 85, 1373,
	125, -1000, 321, 1300, 123, 123, -1000, 255, -1000, 254,
	248, 242, 251, -1000, 122, 73, -1000, -9, -1000, -1000,
	-83, -1000, -1000, -1000, -1000, -1000, -1000, 1018, -29, -1000,
	970, 1373, 1300, -1000, 1300, 1300, 179, 1300, 1300, 1300,
	1300, -1000, -1000, 1, 1, -1000, 271, 282, 161, 1373,
	-1000, 1373, -1000, 1300, -1000, 309, 317, 1373, -1000, 233,
	-1000, -1000, -1000, 249, -1000, 245, -1000, -1000, -1000, -1000,
	-1000, -29, -10, 155, 1300, 1373, 1373, 931, 115, 883,
	834, 785, 737, -1000, -1000, 162, 162, 325, 1373, 319,
	1300, 123, 1300, -1000, -1000, -10, -1000, 154, 324, 1373,
	-1000, -1000, 1300, 1300, -1000, -1000, -1000, -1000, 321, 307,
	316, 1373, 144, 1334, -1000, 268, 1300, 689, 641, 309,
	305, -49, 1300, 1300, 313, 593, -1000, -1000, 319, -1000,
	-49, -1000, 141, -1000, 287, 356, 558, -1000, 307, -1000,
	1300, 289, -1000, -1000, 128, 305, -1000, -1000, 286, 70,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 422, 0, 420, 16, 121, 419, 10, 7, 397,
	396, 12, 395, 394, 393, 392, 391, 390, 14, 389,
	373, 360, 19, 4, 21, 6, 9, 18, 13, 359,
	8, 358, 357, 15, 356, 17, 2, 3, 355, 351,
	5, 1, 346, 11, 342,
}

var yyR1 = [...]int8{
	0, 1, 24, 6, 6, 16, 16, 17, 17, 27,
	27, 27, 27, 27, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 10, 10, 21, 21, 35,
	35, 35, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 26, 26, 34, 34, 30, 30,
	30, 31, 31, 31, 32, 32, 32, 33, 43, 43,
	39, 39, 39, 39, 39, 39, 39, 44, 44, 28,
	28, 29, 29, 29, 23, 18, 18, 18, 18, 22,
	9, 9, 42, 42, 11, 11, 7, 7, 8, 8,
	25, 25, 20, 20, 20, 19, 19, 19, 36, 38,
	38, 37, 37, 40, 40, 41, 41, 12, 12, 12,
	12, 13, 14, 15,
}

var yyR2 = [...]int8{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 0, 5,
	1, 0, 1, 7, 6, 4, 4, 6, 6, 8,
	8, 6, 6, 3, 3, 4, 5, 5, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 4, 4, 5, 4, 4,
	2, 2, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 1, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 0, 1, 3, 0, 3, 7, 0,
	1, 2, 2, 3, 2, 3, 2, 1, 2, 1,
	0, 2, 3, 7, 1, 0, 3, 4, 4, 1,
	0, 2, 4, 5, 0, 5, 0, 2, 0, 2,
	0, 3, 0, 2, 2, 0, 1, 1, 3, 3,
	1, 0, 3, 0, 2, 0, 2, 6, 6, 4,
	4, 1, 3, 3,
}

var yyChk = [...]int16{
	-1000, -1, -16, -17, 16, 7, 52, -22, 50, -35,
	18, -22, 20, -26, -27, -2, 96, -12, -4, 49,
	68, 31, 32, 35, 37, 38, 34, 33, 36, -22,
	21, 95, 66, 65, -15, -14, 27, -3, 51, 54,
	56, 103, 59, 60, 58, 61, 105, 104, -5, 48,
	20, 51, -6, 52, 17, 20, -22, 84, 88, 89,
	90, 91, 93, 92, 94, 95, 96, 97, 98, 99,
	100, 82, 83, 80, 65, 81, 74, 75, 76, 77,
	78, 79, 67, 66, 63, 62, 85, 51, -42, 69,
	51, 51, 51, 51, 51, 51, 51, 51, -18, 51,
	102, 54, 51, -2, -2, -2, -13, -2, -10, -24,
	-2, 7, -31, -2, -32, -33, 105, 51, 51, -24,
	-28, -29, 8, -27, -5, -22, -22, 51, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 105, 105, 73, 105, 105, -2, -2, -2, -2,
	-2, -2, -4, 83, 82, 80, 65, 81, -2, -2,
	58, 66, 61, 59, 60, -21, 96, 18, -9, 69,
	71, -2, -30, -2, 96, -2, -2, 50, 50, 50,
	50, 53, 53, -30, -22, -23, 50, 103, -24, 20,
	28, 53, -35, 52, 55, 52, 57, 106, -34, -2,
	-24, 53, -7, 9, -44, -39, 52, 44, 41, 45,
	42, 43, 47, -27, -24, -30, 105, 63, 105, 105,
	73, 105, 105, 58, 61, 59, 60, -2, 53, 72,
	-2, -2, 70, 53, 52, 52, 20, 52, 52, 52,
	8, 53, -18, 55, 55, 53, -22, -22, -26, -2,
	-33, -2, 53, 52, 53, -25, 10, -2, -27, -27,
	41, 41, 41, 46, 41, 46, 41, 53, 53, -4,
	105, 53, -11, 87, 70, -2, -2, -2, 50, -2,
	-2, -2, -2, -18, -18, 28, 20, -28, -2, -8,
	13, 12, 48, 41, 41, -11, -43, 86, 51, -2,
	53, 53, 52, 52, 53, 53, -22, -22, -7, -37,
	11, -2, -26, -2, -43, 51, 9, -2, -2, -25,
	-40, 14, 12, 74, 29, -2, 53, 53, -8, -41,
	15, -23, -38, -36, -2, -2, 12, 53, -37, -23,
	52, -19, 25, 26, -30, -40, -36, -20, 22, -37,
	-41, 23, 24, 53,
}

var yyDef = [...]int16{
	6, -2, 0, 5, 0, 31, 0, 0, 129, 0,
	30, 0, 0, 4, 94, 11, 12, 13, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 92, 93, 0, 23, 0, 103,
	106, 15, 16, 17, 18, 19, 20, 21, 22, 0,
	0, 0, 120, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 14, 0,
	0, 0, 0, 62, 80, 81, 0, 161, 0, 25,
	26, 31, 0, 101, 0, 104, 0, 0, 0, 0,
	136, 119, 0, 95, 3, 125, 9, 0, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 63, 64, 0, 66, 67, 68, 69, 70, 71,
	72, 73, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 86, 88, 90, 0, 0, 27, 0, 0,
	0, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 43, 44, 0, 125, 0, 0, 124, 0, 0,
	0, 24, 0, 0, 163, 0, 162, 0, 0, 96,
	0, 7, 140, 0, 0, 0, 117, 0, 110, 0,
	0, 0, 0, 121, 0, 0, 65, 0, 75, 76,
	0, 78, 79, 85, 87, 89, 91, 0, 134, 35,
	0, 131, 0, 36, 0, 0, 0, 0, 0, 0,
	0, 45, 126, 125, 125, 48, 159, 160, 120, 102,
	105, 107, 29, 0, 8, 138, 0, 137, 122, 0,
	118, 111, 112, 0, 114, 0, 116, 46, 47, 74,
	77, 134, 109, 0, 0, 132, 100, 0, 0, 0,
	0, 0, 0, 127, 128, 0, 0, 136, 97, 151,
	0, 0, 0, 113, 115, 109, 34, 0, 0, 133,
	37, 38, 0, 0, 41, 42, 157, 158, 140, 153,
	0, 139, 141, 0, 33, 0, 0, 0, 0, 138,
	155, 0, 0, 0, 0, 0, 39, 40, 151, 1,
	0, 154, 152, 150, 145, -2, 0, 135, 153, 156,
	0, 142, 146, 147, 151, 155, 149, 148, 0, 0,
	2, 143, 144, 108,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 64, 3, 3, 3, 98, 90, 3,
	51, 53, 96, 94, 52, 95, 102, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 106, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 54, 3, 55, 89, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 56, 88, 57, 65,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 58,
	59, 60, 61, 62, 63, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 91, 92, 93,
	99, 100, 101, 103, 104, 105,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:119
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			distinct, distinctExpr := decodeDistinct(yyDollar[3].values)
			yylex.(*scanner).result = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:128
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:134
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:134
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:137
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:137
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:140
		{
			yyVAL.with = []expr.CTE{{Table: yyDollar[2].str, As: yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:141
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{Table: yyDollar[3].str, As: yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:147
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:148
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:149
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:150
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:151
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:154
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:158
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:159
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:160
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = expr.Null{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:162
		{
			yyVAL.expr = expr.Missing{}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:163
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:164
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:177
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:181
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:182
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:185
		{
			yyVAL.yesno = true
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:185
		{
			yyVAL.yesno = false
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:188
		{
			yyVAL.values = yyDollar[4].values
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:189
		{
			yyVAL.values = []expr.Node{}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:190
		{
			yyVAL.values = nil
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:200
		{
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
			if err != nil {
				yylex.Error(__yyfmt__.Sprintf("%s", err))
			}
			yyVAL.expr = agg
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:208
		{
			distinct := false
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(__yyfmt__.Sprintf("%s", err))
			}
			yyVAL.expr = agg
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:217
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:221
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:225
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:229
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
				return 1
			}
			yyVAL.expr = nod
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:238
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:246
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:254
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:262
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:270
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:274
		{
			op := expr.Call(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:282
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:290
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:294
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:298
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:302
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:306
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:310
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:314
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:318
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:322
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:326
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:330
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:334
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:338
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:342
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:346
		{
			yyVAL.expr = expr.Call("CONCAT", yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:350
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:354
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:358
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:362
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:366
		{
			yyVAL.expr = expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[4].str))
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:370
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:374
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:378
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:382
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:386
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:390
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:394
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:398
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:402
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:406
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:410
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:414
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[5].str))}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:418
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:422
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:426
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:430
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:434
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:438
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:442
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:446
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:450
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:454
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:458
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:462
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:466
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:470
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:475
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:480
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:486
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:487
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:491
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:492
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:496
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:497
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:498
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:502
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:503
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:504
		{
			yyVAL.values = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:508
		{
			yyVAL.values = yyDollar[1].values
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:509
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].values...)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:510
		{
			yyVAL.values = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:514
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 108:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:518
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:521
		{
			yyVAL.wind = nil
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:524
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:525
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:526
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:527
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:528
		{
			yyVAL.jk = expr.RightJoin
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:529
		{
			yyVAL.jk = expr.RightJoin
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:530
		{
			yyVAL.jk = expr.FullJoin
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:535
		{
			yyVAL.from = yyDollar[1].from
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:536
		{
			yyVAL.from = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:543
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:544
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:546
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:549
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:552
		{
			yyVAL.pc = nil
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:553
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:554
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:555
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:564
		{
			yyVAL.str = yyDollar[1].str
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:567
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:568
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:571
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:572
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:575
		{
			yyVAL.expr = nil
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:576
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:579
		{
			yyVAL.expr = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:580
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:583
		{
			yyVAL.expr = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:584
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:587
		{
			yyVAL.bindings = nil
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:588
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:592
		{
			yyVAL.yesno = false
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:593
		{
			yyVAL.yesno = false
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:594
		{
			yyVAL.yesno = true
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:598
		{
			yyVAL.yesno = false
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:599
		{
			yyVAL.yesno = false
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:600
		{
			yyVAL.yesno = true
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:604
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:607
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:608
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:611
		{
			yyVAL.orders = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:612
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:615
		{
			yyVAL.exprint = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:616
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:619
		{
			yyVAL.exprint = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:620
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:623
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			at := yyDollar[6].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:624
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[6].str
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:625
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: nil}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:626
		{ /*Cloning, as the buffer gets overwritten*/
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: nil, At: &at}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:629
		{
			yyVAL.expr = &expr.Table{Binding: expr.Bind(yyDollar[1].expr, "")}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:632
		{
			yyVAL.expr = expr.Call("MAKE_STRUCT", yyDollar[2].values...)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:635
		{
			yyVAL.expr = expr.Call("MAKE_LIST", yyDollar[2].values...)
		}
	}
	goto yystack /* stack new state and value */
}
