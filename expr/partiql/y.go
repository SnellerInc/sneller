// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"
	"strings"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:38
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const EXPLAIN = 57360
const DISTINCT = 57361
const ALL = 57362
const AS = 57363
const EXISTS = 57364
const NULLS = 57365
const FIRST = 57366
const LAST = 57367
const ASC = 57368
const DESC = 57369
const UNPIVOT = 57370
const AT = 57371
const PARTITION = 57372
const VALUE = 57373
const LEADING = 57374
const TRAILING = 57375
const BOTH = 57376
const COALESCE = 57377
const NULLIF = 57378
const EXTRACT = 57379
const DATE_TRUNC = 57380
const CAST = 57381
const UTCNOW = 57382
const DATE_ADD = 57383
const DATE_DIFF = 57384
const EARLIEST = 57385
const LATEST = 57386
const JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const CROSS = 57390
const INNER = 57391
const OUTER = 57392
const FULL = 57393
const ON = 57394
const APPROX_COUNT_DISTINCT = 57395
const AGGREGATE = 57396
const ID = 57397
const NULL = 57398
const TRUE = 57399
const FALSE = 57400
const MISSING = 57401
const OR = 57402
const AND = 57403
const NOT = 57404
const BETWEEN = 57405
const CASE = 57406
const WHEN = 57407
const THEN = 57408
const ELSE = 57409
const END = 57410
const TO = 57411
const TRIM = 57412
const EQ = 57413
const NE = 57414
const LT = 57415
const LE = 57416
const GT = 57417
const GE = 57418
const SIMILAR = 57419
const REGEXP_MATCH_CI = 57420
const ILIKE = 57421
const LIKE = 57422
const IN = 57423
const IS = 57424
const OVER = 57425
const FILTER = 57426
const SHIFT_LEFT_LOGICAL = 57427
const SHIFT_RIGHT_ARITHMETIC = 57428
const SHIFT_RIGHT_LOGICAL = 57429
const CONCAT = 57430
const APPEND = 57431
const NEGATION_PRECEDENCE = 57432
const NUMBER = 57433
const ION = 57434
const STRING = 57435

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"EXPLAIN",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"UNPIVOT",
	"AT",
	"PARTITION",
	"VALUE",
	"LEADING",
	"TRAILING",
	"BOTH",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"APPROX_COUNT_DISTINCT",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"TRIM",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 375,
	67, 78,
	68, 78,
	70, 78,
	71, 78,
	72, 78,
	80, 78,
	81, 78,
	82, 78,
	83, 78,
	84, 78,
	85, 78,
	-2, 133,
}

const yyPrivate = 57344

const yyLast = 2130

var yyAct = [...]int16{
	19, 369, 373, 343, 179, 358, 316, 323, 197, 274,
	214, 128, 291, 17, 106, 123, 209, 13, 22, 289,
	18, 117, 124, 234, 233, 231, 96, 66, 67, 69,
	68, 70, 71, 72, 73, 74, 75, 76, 111, 112,
	113, 35, 198, 115, 230, 118, 121, 228, 10, 12,
	153, 15, 70, 71, 72, 73, 74, 75, 76, 152,
	150, 62, 149, 199, 109, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 175, 127,
	131, 75, 76, 154, 155, 156, 157, 158, 159, 292,
	107, 166, 167, 109, 324, 176, 199, 295, 180, 182,
	183, 232, 133, 134, 151, 178, 189, 160, 180, 11,
	44, 229, 195, 108, 244, 54, 245, 50, 48, 49,
	51, 72, 73, 74, 75, 76, 211, 164, 207, 263,
	133, 205, 200, 208, 206, 262, 180, 204, 248, 287,
	227, 394, 108, 163, 165, 162, 161, 381, 212, 334,
	196, 225, 168, 171, 172, 170, 130, 226, 272, 271,
	169, 174, 344, 47, 53, 52, 235, 237, 238, 236,
	248, 260, 248, 247, 239, 331, 132, 327, 286, 246,
	273, 264, 253, 254, 79, 81, 77, 78, 63, 92,
	240, 259, 64, 65, 66, 67, 69, 68, 70, 71,
	72, 73, 74, 75, 76, 59, 268, 213, 248, 59,
	270, 261, 203, 188, 355, 252, 276, 60, 267, 251,
	11, 9, 349, 269, 65, 66, 67, 69, 68, 70,
	71, 72, 73, 74, 75, 76, 325, 277, 278, 135,
	126, 125, 110, 265, 266, 296, 297, 105, 288, 299,
	300, 294, 302, 303, 293, 305, 306, 59, 307, 308,
	67, 69, 68, 70, 71, 72, 73, 74, 75, 76,
	104, 133, 103, 315, 102, 101, 100, 310, 311, 314,
	220, 222, 223, 219, 221, 99, 224, 98, 97, 94,
	93, 304, 218, 57, 301, 187, 186, 185, 184, 329,
	319, 326, 55, 322, 283, 321, 281, 320, 285, 284,
	339, 282, 280, 279, 362, 201, 312, 14, 345, 389,
	347, 392, 393, 202, 313, 342, 56, 16, 7, 352,
	348, 3, 346, 353, 354, 6, 370, 359, 317, 376,
	351, 360, 318, 344, 275, 350, 215, 255, 130, 119,
	8, 363, 357, 216, 340, 341, 367, 2, 190, 364,
	177, 374, 375, 217, 368, 372, 210, 122, 371, 120,
	129, 173, 379, 388, 382, 5, 4, 180, 40, 380,
	36, 385, 374, 41, 387, 386, 114, 21, 391, 390,
	191, 192, 193, 26, 27, 32, 31, 28, 33, 29,
	30, 116, 243, 95, 58, 43, 1, 0, 0, 0,
	0, 24, 23, 11, 44, 0, 0, 45, 0, 46,
	0, 50, 48, 49, 51, 0, 0, 0, 39, 38,
	0, 25, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 0, 37,
	0, 0, 0, 42, 0, 0, 0, 47, 53, 52,
	26, 27, 32, 31, 28, 33, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 24, 23,
	11, 44, 0, 0, 45, 0, 46, 0, 50, 48,
	49, 51, 0, 0, 0, 39, 38, 0, 25, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 0, 37, 20, 0, 0,
	0, 0, 0, 0, 47, 53, 52, 26, 27, 32,
	31, 28, 33, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 24, 23, 11, 44, 0,
	0, 45, 0, 46, 0, 50, 48, 49, 51, 0,
	0, 0, 39, 38, 0, 25, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 0, 37, 181, 0, 0, 0, 0, 0,
	0, 47, 53, 52, 26, 27, 32, 31, 28, 33,
	29, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 24, 23, 11, 44, 0, 194, 45, 0,
	46, 0, 50, 48, 49, 51, 0, 0, 0, 39,
	38, 0, 25, 0, 0, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
	37, 181, 0, 0, 0, 0, 0, 0, 47, 53,
	52, 26, 27, 32, 31, 28, 33, 29, 30, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	23, 11, 44, 0, 0, 45, 0, 46, 0, 50,
	48, 49, 51, 0, 0, 0, 39, 38, 0, 25,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	256, 0, 0, 0, 0, 0, 0, 37, 181, 91,
	90, 0, 80, 89, 88, 47, 53, 52, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 87, 79, 81,
	77, 78, 63, 92, 119, 0, 64, 65, 66, 67,
	69, 68, 70, 71, 72, 73, 74, 75, 76, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 27, 32, 31, 28, 33, 29, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 23, 11, 44, 0, 0, 45, 0, 46, 0,
	50, 48, 49, 51, 0, 0, 0, 39, 38, 0,
	25, 0, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 0, 37, 0,
	0, 0, 0, 0, 0, 0, 47, 53, 52, 26,
	27, 32, 31, 28, 33, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 23, 11,
	44, 0, 0, 45, 0, 46, 0, 50, 48, 49,
	51, 0, 0, 0, 39, 38, 0, 25, 383, 384,
	0, 0, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 0, 47, 53, 52, 0, 0, 0, 91,
	90, 0, 80, 89, 88, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 87, 79, 81,
	77, 78, 63, 92, 0, 0, 64, 65, 66, 67,
	69, 68, 70, 71, 72, 73, 74, 75, 76, 242,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	90, 0, 80, 89, 88, 61, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 87, 79, 81,
	77, 78, 63, 92, 0, 0, 64, 65, 66, 67,
	69, 68, 70, 71, 72, 73, 74, 75, 76, 11,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 90, 0, 80, 89, 88, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 85, 86, 87,
	79, 81, 77, 78, 63, 92, 0, 0, 64, 65,
	66, 67, 69, 68, 70, 71, 72, 73, 74, 75,
	76, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 90, 0, 80, 89, 88, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 86, 87, 79,
	81, 77, 78, 63, 92, 0, 0, 64, 65, 66,
	67, 69, 68, 70, 71, 72, 73, 74, 75, 76,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	90, 0, 80, 89, 88, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 87, 79, 81,
	77, 78, 63, 92, 0, 0, 64, 65, 66, 67,
	69, 68, 70, 71, 72, 73, 74, 75, 76, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 90,
	0, 80, 89, 88, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 85, 86, 87, 79, 81, 77,
	78, 63, 92, 0, 0, 64, 65, 66, 67, 69,
	68, 70, 71, 72, 73, 74, 75, 76, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 90, 0,
	80, 89, 88, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 85, 86, 87, 79, 81, 77, 78,
	63, 92, 0, 0, 64, 65, 66, 67, 69, 68,
	70, 71, 72, 73, 74, 75, 76, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 90, 0, 80,
	89, 88, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 85, 86, 87, 79, 81, 77, 78, 63,
	92, 0, 0, 64, 65, 66, 67, 69, 68, 70,
	71, 72, 73, 74, 75, 76, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 90, 0, 80, 89,
	88, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 85, 86, 87, 79, 81, 77, 78, 63, 92,
	0, 0, 64, 65, 66, 67, 69, 68, 70, 71,
	72, 73, 74, 75, 76, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 90, 0, 80, 89, 88, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 87, 79, 81, 77, 78, 63, 92, 0, 0,
	64, 65, 66, 67, 69, 68, 70, 71, 72, 73,
	74, 75, 76, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 90, 0, 80, 89, 88, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 85, 86,
	87, 79, 81, 77, 78, 63, 92, 0, 0, 64,
	65, 66, 67, 69, 68, 70, 71, 72, 73, 74,
	75, 76, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 90, 0, 80, 89, 88, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 85, 86,
	87, 79, 81, 77, 78, 63, 92, 0, 0, 64,
	65, 66, 67, 69, 68, 70, 71, 72, 73, 74,
	75, 76, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 90, 0, 80, 89, 88, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 85, 86,
	87, 79, 81, 77, 78, 63, 92, 0, 0, 64,
	65, 66, 67, 69, 68, 70, 71, 72, 73, 74,
	75, 76, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 90, 0, 80, 89, 88, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 85, 86, 87,
	79, 81, 77, 78, 63, 92, 309, 0, 64, 65,
	66, 67, 69, 68, 70, 71, 72, 73, 74, 75,
	76, 91, 90, 0, 80, 89, 88, 0, 0, 328,
	0, 0, 0, 0, 82, 83, 84, 85, 86, 87,
	79, 81, 77, 78, 63, 92, 0, 0, 64, 65,
	66, 67, 69, 68, 70, 71, 72, 73, 74, 75,
	76, 0, 0, 0, 0, 91, 90, 0, 80, 89,
	88, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 85, 86, 87, 79, 81, 77, 78, 63, 92,
	0, 0, 64, 65, 66, 67, 69, 68, 70, 71,
	72, 73, 74, 75, 76, 91, 90, 0, 80, 89,
	88, 0, 0, 298, 0, 0, 0, 0, 82, 83,
	84, 85, 86, 87, 79, 81, 77, 78, 63, 92,
	0, 0, 64, 65, 66, 67, 69, 68, 70, 71,
	72, 73, 74, 75, 76, 290, 0, 0, 250, 0,
	0, 0, 0, 0, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 91, 90, 0, 80, 89, 88,
	0, 0, 0, 0, 0, 0, 0, 361, 83, 84,
	85, 86, 87, 79, 81, 77, 78, 63, 92, 0,
	0, 64, 65, 66, 67, 69, 68, 70, 71, 72,
	73, 74, 75, 76, 90, 0, 80, 89, 88, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 87, 79, 81, 77, 78, 63, 92, 0, 0,
	64, 65, 66, 67, 69, 68, 70, 71, 72, 73,
	74, 75, 76, 80, 89, 88, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 86, 87, 79,
	81, 77, 78, 63, 92, 0, 0, 64, 65, 66,
	67, 69, 68, 70, 71, 72, 73, 74, 75, 76,
}

var yyPact = [...]int16{
	313, -1000, 319, 307, 343, 164, 165, 165, 298, 165,
	306, -1000, -1000, 435, 250, 305, 237, 200, -1000, 1014,
	-1000, -1000, -1000, 234, 233, 864, 232, 231, 229, 220,
	219, 218, 216, 214, 191, 34, 186, 864, 864, 864,
	-1000, -1000, 864, -1000, 787, 864, -89, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 185, 184, 342, 340, 435,
	165, 165, -1000, 183, 864, 864, 864, 864, 864, 864,
	864, 864, 864, 864, 864, 864, 864, -49, -51, 26,
	-52, -61, 864, 864, 864, 864, 864, 864, 54, 57,
	864, 864, 89, 59, 864, 31, 1907, 666, 864, 864,
	243, 242, 241, 240, 155, 358, -1000, 589, 165, -13,
	342, -1000, 2023, 2023, 294, 1907, 154, -1000, 1907, 298,
	74, 1907, 71, -1000, -96, 864, 342, 149, 337, 235,
	435, -1000, -1000, 5, -1000, 512, 129, -69, 163, -48,
	-48, -48, 19, 19, -24, -24, -24, -1000, -1000, -1000,
	-1000, -64, -1000, -1000, 98, 98, 98, 98, 98, 98,
	43, -67, -86, 23, -87, -88, 2023, 1986, -1000, 103,
	-1000, -1000, -1000, 864, 132, -1000, 962, 40, 864, 115,
	1907, -1000, 1867, 1817, 162, 158, 126, 339, -1000, 702,
	864, -1000, -1000, -1000, -1000, 113, 5, 75, 69, -1000,
	123, 165, 165, -1000, 435, 864, -1000, -89, -1000, 864,
	101, 1907, 122, -1000, 334, 864, 435, 435, -1000, 268,
	-1000, 267, 261, 259, 263, -1000, 120, 81, -1000, 54,
	-1000, -1000, -92, -1000, -1000, -1000, -1000, -1000, -1000, 1777,
	-4, -4, -46, 20, 864, 864, 1728, -1000, 864, 864,
	239, 864, 864, 236, 864, 864, -1000, 864, 864, 1688,
	-1000, -1000, 5, 5, -1000, 287, 303, 148, 1907, -1000,
	1907, -1000, 864, -1000, 325, 330, 1907, -1000, 248, -1000,
	-1000, -1000, 262, -1000, 260, -1000, -1000, -1000, -1000, -1000,
	-4, 2, 180, 2, 119, -1000, 1644, 1907, 864, 1907,
	1604, 117, 1555, 1505, 91, 1455, 1406, 1357, 1308, 864,
	-1000, -1000, 165, 165, 337, 1907, 332, 864, 435, 864,
	-1000, -1000, 2, -1000, 166, 336, -1000, -4, 864, 1907,
	-1000, -1000, 864, 864, 157, -1000, -1000, -1000, -1000, 1259,
	-1000, -1000, 334, 323, 329, 1907, 152, 1947, -1000, 284,
	864, 2, 1907, 1210, 1161, 864, -1000, 325, 321, -46,
	864, 864, 327, 1112, -1000, -1000, -1000, 1063, 332, -1000,
	-46, -1000, 90, -1000, 912, 98, 666, -1000, -1000, 323,
	-1000, 864, 296, -1000, -1000, 151, 321, -1000, -1000, 297,
	83, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 406, 0, 405, 18, 115, 404, 10, 6, 403,
	402, 401, 12, 387, 386, 383, 378, 376, 375, 14,
	374, 373, 371, 41, 8, 21, 9, 13, 20, 11,
	370, 4, 369, 367, 15, 366, 17, 2, 3, 365,
	363, 5, 1, 360, 7, 358, 357, 353,
}

var yyR1 = [...]int8{
	0, 1, 25, 46, 46, 46, 6, 6, 17, 17,
	18, 18, 28, 28, 28, 28, 28, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 11, 11,
	22, 22, 36, 36, 36, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 27, 27, 35, 35, 31, 31,
	31, 32, 32, 32, 33, 33, 33, 34, 44, 44,
	40, 40, 40, 40, 40, 40, 40, 47, 47, 29,
	29, 30, 30, 30, 24, 19, 19, 19, 19, 23,
	10, 10, 43, 43, 9, 9, 12, 12, 7, 7,
	8, 8, 26, 26, 21, 21, 21, 20, 20, 20,
	37, 39, 39, 38, 38, 41, 41, 42, 42, 13,
	13, 13, 13, 14, 15, 16, 45, 45, 45,
}

var yyR2 = [...]int8{
	0, 13, 10, 1, 3, 0, 2, 0, 1, 0,
	6, 7, 3, 2, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 0, 5, 1, 0, 1, 7, 6, 6, 8,
	5, 4, 6, 6, 8, 8, 9, 6, 6, 3,
	4, 6, 6, 7, 3, 4, 5, 5, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 4, 4, 5, 4, 4,
	2, 2, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 1, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 0, 1, 3, 0, 3, 7, 0,
	1, 2, 2, 3, 2, 3, 2, 1, 2, 1,
	0, 2, 3, 7, 1, 0, 3, 4, 4, 1,
	0, 2, 4, 5, 0, 1, 0, 5, 0, 2,
	0, 2, 0, 3, 0, 2, 2, 0, 1, 1,
	3, 3, 1, 0, 3, 0, 2, 0, 2, 6,
	6, 4, 4, 1, 3, 3, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -46, 18, -17, -18, 16, 21, 7, 57,
	-23, 55, -23, -36, 19, -23, 21, -27, -28, -2,
	102, -13, -4, 54, 53, 73, 35, 36, 39, 41,
	42, 38, 37, 40, 79, -23, 22, 101, 71, 70,
	-16, -15, 28, -3, 56, 59, 61, 109, 64, 65,
	63, 66, 111, 110, -5, 52, 21, 56, -6, 57,
	17, 21, -23, 90, 94, 95, 96, 97, 99, 98,
	100, 101, 102, 103, 104, 105, 106, 88, 89, 86,
	70, 87, 80, 81, 82, 83, 84, 85, 72, 71,
	68, 67, 91, 56, 56, -9, -2, 56, 56, 56,
	56, 56, 56, 56, 56, 56, -19, 56, 108, 59,
	56, -2, -2, -2, -14, -2, -11, -25, -2, 7,
	-32, -2, -33, -34, 111, 56, 56, -25, -29, -30,
	8, -28, -5, -23, -23, 56, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 111,
	111, 78, 111, 111, -2, -2, -2, -2, -2, -2,
	-4, 89, 88, 86, 70, 87, -2, -2, 63, 71,
	66, 64, 65, -22, 102, 19, -2, -43, 74, -31,
	-2, 102, -2, -2, 55, 55, 55, 55, 58, -2,
	-45, 32, 33, 34, 58, -31, -23, -24, 55, 109,
	-25, 21, 29, 58, -36, 57, 60, 57, 62, 112,
	-35, -2, -25, 58, -7, 9, -47, -40, 57, 48,
	45, 49, 46, 47, 51, -28, -25, -31, 111, 68,
	111, 111, 78, 111, 111, 63, 66, 64, 65, -2,
	58, 58, 57, -10, 74, 76, -2, 58, 57, 57,
	21, 57, 57, 56, 57, 8, 58, 57, 8, -2,
	58, -19, 60, 60, 58, -23, -23, -27, -2, -34,
	-2, 58, 57, 58, -26, 10, -2, -28, -28, 45,
	45, 45, 50, 45, 50, 45, 58, 58, -4, 111,
	58, -12, 93, -12, -24, 77, -2, -2, 75, -2,
	-2, 55, -2, -2, 55, -2, -2, -2, -2, 8,
	-19, -19, 29, 21, -29, -2, -8, 13, 12, 52,
	45, 45, -12, -44, 92, 56, -44, 58, 75, -2,
	58, 58, 57, 57, 58, 58, 58, 58, 58, -2,
	-23, -23, -7, -38, 11, -2, -27, -2, -44, 56,
	9, -12, -2, -2, -2, 57, 58, -26, -41, 14,
	12, 80, 30, -2, -44, 58, 58, -2, -8, -42,
	15, -24, -39, -37, -2, -2, 12, 58, 58, -38,
	-24, 57, -20, 26, 27, -31, -41, -37, -21, 23,
	-38, -42, 24, 25, 58,
}

var yyDef = [...]int16{
	5, -2, 9, 3, 0, 8, 0, 0, 34, 0,
	0, 139, 4, 0, 33, 0, 0, 7, 104, 14,
	15, 16, 35, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	102, 103, 0, 26, 0, 113, 116, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 0, 0, 130, 0,
	0, 0, 13, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 17, 0, 0, 0,
	0, 72, 90, 91, 0, 173, 0, 28, 29, 34,
	0, 111, 0, 114, 0, 0, 0, 0, 148, 129,
	0, 105, 6, 135, 12, 0, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 73,
	74, 0, 76, 77, 78, 79, 80, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 0,
	96, 98, 100, 0, 0, 30, 0, 140, 0, 0,
	108, 109, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 176, 177, 178, 54, 0, 135, 0, 0, 134,
	0, 0, 0, 27, 0, 0, 175, 0, 174, 0,
	0, 106, 0, 10, 152, 0, 0, 0, 127, 0,
	120, 0, 0, 0, 0, 131, 0, 0, 75, 0,
	85, 86, 0, 88, 89, 95, 97, 99, 101, 0,
	146, 146, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	55, 136, 135, 135, 58, 171, 172, 130, 112, 115,
	117, 32, 0, 11, 150, 0, 149, 132, 0, 128,
	121, 122, 0, 124, 0, 126, 56, 57, 84, 87,
	146, 119, 0, 119, 0, 40, 0, 141, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 138, 0, 0, 148, 107, 163, 0, 0, 0,
	123, 125, 119, 37, 0, 0, 38, 146, 0, 142,
	42, 43, 0, 0, 0, 47, 48, 51, 52, 0,
	169, 170, 152, 165, 0, 151, 153, 0, 36, 0,
	0, 119, 143, 0, 0, 0, 53, 150, 167, 0,
	0, 0, 0, 0, 39, 44, 45, 0, 163, 1,
	0, 166, 164, 162, 157, -2, 0, 147, 46, 165,
	168, 0, 154, 158, 159, 163, 167, 161, 160, 0,
	0, 2, 155, 156, 118,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 104, 96, 3,
	56, 58, 102, 100, 57, 101, 108, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 112, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 59, 3, 60, 95, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 61, 94, 62, 70,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 63, 64, 65, 66, 67, 68,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 97, 98, 99, 105, 106, 107, 109,
	110, 111,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-13 : yypt+1]
//line partiql.y:125
		{
			exp, err := parseExplain(yyDollar[1].str)
			if err != nil {
				yylex.Error(err.Error())
			}
			yylex.(*scanner).explain = exp

			yylex.(*scanner).with = yyDollar[2].with
			yylex.(*scanner).into = yyDollar[6].expr
			distinct, distinctExpr := decodeDistinct(yyDollar[4].values)
			yylex.(*scanner).result = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[5].bindings, From: yyDollar[7].from, Where: yyDollar[8].expr, GroupBy: yyDollar[9].bindings, Having: yyDollar[10].expr, OrderBy: yyDollar[11].orders, Limit: yyDollar[12].exprint, Offset: yyDollar[13].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:140
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:146
		{
			yyVAL.str = "default"
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:147
		{
			yyVAL.str = yyDollar[3].str
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:148
		{
			yyVAL.str = ""
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:151
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:151
		{
			yyVAL.expr = nil
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:154
		{
			yyVAL.with = yyDollar[1].with
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:154
		{
			yyVAL.with = nil
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:157
		{
			yyVAL.with = []expr.CTE{{Table: yyDollar[2].str, As: yyDollar[5].sel}}
		}
	case 11:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:158
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{Table: yyDollar[3].str, As: yyDollar[6].sel})
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:164
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:165
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:166
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:167
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:168
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:171
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:176
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:177
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:178
		{
			yyVAL.expr = expr.Null{}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:179
		{
			yyVAL.expr = expr.Missing{}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:180
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:181
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:182
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:195
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:198
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:202
		{
			yyVAL.yesno = true
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:202
		{
			yyVAL.yesno = false
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:205
		{
			yyVAL.values = yyDollar[4].values
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:206
		{
			yyVAL.values = []expr.Node{}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:207
		{
			yyVAL.values = nil
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:213
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:217
		{
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:225
		{
			distinct := false
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:234
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, expr.ApproxCountDistinctDefaultPrecision, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:242
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, yyDollar[5].integer, yyDollar[7].expr, yyDollar[8].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:250
		{
			yyVAL.expr = createCase(yyDollar[2].expr, yyDollar[3].limbs, yyDollar[4].expr)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:254
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:258
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:262
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
			}
			yyVAL.expr = nod
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:270
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_ADD")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:278
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_DIFF")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line partiql.y:286
		{
			dow, ok := weekday(yyDollar[5].str)
			if strings.ToUpper(yyDollar[3].str) != "WEEK" || !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q(%q)", yyDollar[3].str, yyDollar[5].str))
			}
			yyVAL.expr = expr.DateTruncWeekday(yyDollar[8].expr, dow)
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:294
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_TRUNC")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:302
		{
			part, ok := timePartFor(yyDollar[3].str, "EXTRACT")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:310
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:314
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, nil)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:322
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, yyDollar[5].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:330
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[5].expr, yyDollar[3].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:338
		{
			node, err := createTrimInvocation(yyDollar[3].integer, yyDollar[6].expr, yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:346
		{
			op := expr.CallByName(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:354
		{
			op := expr.CallByName(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:362
		{
			yyVAL.expr = expr.Call(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:366
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:370
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:374
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:378
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:382
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:386
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:390
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:394
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:398
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:402
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:406
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:410
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:414
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:418
		{
			yyVAL.expr = expr.Call(expr.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:422
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:426
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:430
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:434
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:438
		{
			yyVAL.expr = expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[4].str))
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:442
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:446
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:450
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:454
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:458
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:462
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:466
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:470
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:474
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:478
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:482
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:486
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[5].str))}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:490
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:494
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:498
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:502
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:506
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:510
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:514
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:518
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:522
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:526
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:530
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:534
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:538
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:542
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:547
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:558
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:559
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:563
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:564
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:568
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:569
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:570
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:574
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:575
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:576
		{
			yyVAL.values = nil
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:580
		{
			yyVAL.values = yyDollar[1].values
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:581
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].values...)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:582
		{
			yyVAL.values = nil
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:586
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:590
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:593
		{
			yyVAL.wind = nil
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:596
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:597
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:598
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:599
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:600
		{
			yyVAL.jk = expr.RightJoin
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:601
		{
			yyVAL.jk = expr.RightJoin
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:602
		{
			yyVAL.jk = expr.FullJoin
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:607
		{
			yyVAL.from = yyDollar[1].from
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:608
		{
			yyVAL.from = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:615
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:616
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 133:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:618
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:621
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:624
		{
			yyVAL.pc = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:625
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:626
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:627
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:636
		{
			yyVAL.str = yyDollar[1].str
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:639
		{
			yyVAL.expr = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:640
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:643
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:644
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:647
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:648
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:651
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:652
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:655
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:656
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:659
		{
			yyVAL.expr = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:660
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:663
		{
			yyVAL.bindings = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:664
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:668
		{
			yyVAL.yesno = false
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:669
		{
			yyVAL.yesno = false
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:670
		{
			yyVAL.yesno = true
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:674
		{
			yyVAL.yesno = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:675
		{
			yyVAL.yesno = false
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:676
		{
			yyVAL.yesno = true
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:680
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:683
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:684
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:687
		{
			yyVAL.orders = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:688
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:691
		{
			yyVAL.exprint = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:692
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:695
		{
			yyVAL.exprint = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:696
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:699
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			at := yyDollar[6].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:700
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[6].str
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:701
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: nil}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:702
		{ /*Cloning, as the buffer gets overwritten*/
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: nil, At: &at}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:705
		{
			yyVAL.expr = &expr.Table{Binding: expr.Bind(yyDollar[1].expr, "")}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:708
		{
			yyVAL.expr = expr.Call(expr.MakeStruct, yyDollar[2].values...)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:711
		{
			yyVAL.expr = expr.Call(expr.MakeList, yyDollar[2].values...)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:714
		{
			yyVAL.integer = trimLeading
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:715
		{
			yyVAL.integer = trimTrailing
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:716
		{
			yyVAL.integer = trimBoth
		}
	}
	goto yystack /* stack new state and value */
}
