// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"
	"strings"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:38
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	order    expr.Order
	sel      *expr.Select
	selinto  selectWithInto
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
	unions   []unionItem
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const EXPLAIN = 57360
const DISTINCT = 57361
const ALL = 57362
const AS = 57363
const EXISTS = 57364
const NULLS = 57365
const FIRST = 57366
const LAST = 57367
const ASC = 57368
const DESC = 57369
const UNPIVOT = 57370
const AT = 57371
const PARTITION = 57372
const VALUE = 57373
const LEADING = 57374
const TRAILING = 57375
const BOTH = 57376
const COALESCE = 57377
const NULLIF = 57378
const EXTRACT = 57379
const DATE_TRUNC = 57380
const CAST = 57381
const UTCNOW = 57382
const DATE_ADD = 57383
const DATE_DIFF = 57384
const EARLIEST = 57385
const LATEST = 57386
const JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const CROSS = 57390
const INNER = 57391
const OUTER = 57392
const FULL = 57393
const ON = 57394
const APPROX_COUNT_DISTINCT = 57395
const AGGREGATE = 57396
const ID = 57397
const NULL = 57398
const TRUE = 57399
const FALSE = 57400
const MISSING = 57401
const OR = 57402
const AND = 57403
const NOT = 57404
const BETWEEN = 57405
const CASE = 57406
const WHEN = 57407
const THEN = 57408
const ELSE = 57409
const END = 57410
const TO = 57411
const TRIM = 57412
const EQ = 57413
const NE = 57414
const LT = 57415
const LE = 57416
const GT = 57417
const GE = 57418
const SIMILAR = 57419
const REGEXP_MATCH_CI = 57420
const ILIKE = 57421
const LIKE = 57422
const IN = 57423
const IS = 57424
const OVER = 57425
const FILTER = 57426
const ESCAPE = 57427
const SHIFT_LEFT_LOGICAL = 57428
const SHIFT_RIGHT_ARITHMETIC = 57429
const SHIFT_RIGHT_LOGICAL = 57430
const CONCAT = 57431
const APPEND = 57432
const NEGATION_PRECEDENCE = 57433
const NUMBER = 57434
const ION = 57435
const STRING = 57436

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"EXPLAIN",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"UNPIVOT",
	"AT",
	"PARTITION",
	"VALUE",
	"LEADING",
	"TRAILING",
	"BOTH",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"APPROX_COUNT_DISTINCT",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"TRIM",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"ESCAPE",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 386,
	67, 88,
	68, 88,
	70, 88,
	71, 88,
	72, 88,
	80, 88,
	81, 88,
	82, 88,
	83, 88,
	84, 88,
	85, 88,
	-2, 143,
}

const yyPrivate = 57344

const yyLast = 2169

var yyAct = [...]int16{
	25, 354, 384, 185, 206, 380, 23, 369, 334, 302,
	325, 281, 28, 220, 125, 134, 212, 332, 24, 71,
	72, 73, 75, 74, 76, 77, 78, 79, 80, 81,
	82, 208, 102, 207, 331, 120, 300, 296, 295, 20,
	126, 242, 241, 41, 114, 115, 116, 118, 239, 123,
	11, 13, 238, 236, 18, 159, 158, 156, 128, 155,
	208, 62, 76, 77, 78, 79, 80, 81, 82, 68,
	133, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 137, 119, 81, 82, 122, 160,
	161, 162, 163, 164, 165, 181, 299, 172, 173, 298,
	131, 182, 235, 234, 186, 188, 189, 166, 303, 335,
	139, 140, 195, 186, 240, 157, 201, 12, 48, 306,
	252, 57, 253, 56, 184, 52, 50, 51, 53, 237,
	216, 78, 79, 80, 81, 82, 211, 273, 139, 403,
	170, 210, 186, 214, 47, 233, 213, 272, 345, 219,
	256, 294, 342, 202, 338, 231, 169, 171, 168, 167,
	293, 14, 279, 205, 243, 245, 246, 244, 278, 277,
	217, 355, 49, 55, 54, 174, 177, 178, 176, 180,
	247, 232, 61, 175, 269, 254, 256, 268, 248, 85,
	87, 83, 84, 69, 98, 256, 255, 267, 70, 71,
	72, 73, 75, 74, 76, 77, 78, 79, 80, 81,
	82, 138, 218, 275, 209, 276, 136, 256, 392, 12,
	194, 360, 283, 57, 132, 56, 274, 52, 50, 51,
	53, 261, 262, 280, 226, 228, 229, 225, 227, 65,
	230, 284, 285, 366, 260, 259, 224, 270, 271, 10,
	297, 336, 12, 307, 308, 305, 141, 310, 311, 304,
	313, 314, 130, 316, 317, 65, 318, 319, 66, 129,
	113, 112, 111, 110, 49, 55, 54, 109, 108, 323,
	107, 139, 73, 75, 74, 76, 77, 78, 79, 80,
	81, 82, 324, 72, 73, 75, 74, 76, 77, 78,
	79, 80, 81, 82, 106, 105, 104, 315, 65, 103,
	340, 333, 100, 337, 99, 60, 312, 193, 192, 191,
	190, 350, 328, 58, 330, 290, 288, 356, 329, 358,
	291, 289, 292, 287, 357, 353, 286, 373, 203, 321,
	363, 399, 359, 322, 364, 365, 204, 16, 362, 401,
	402, 59, 19, 7, 17, 368, 22, 3, 6, 381,
	370, 326, 374, 387, 371, 351, 352, 378, 327, 21,
	63, 375, 385, 386, 355, 382, 379, 263, 282, 361,
	221, 136, 22, 9, 15, 390, 391, 222, 186, 42,
	2, 396, 196, 385, 183, 397, 223, 383, 400, 197,
	198, 199, 32, 33, 38, 37, 34, 39, 35, 36,
	215, 124, 127, 135, 8, 179, 398, 393, 5, 4,
	30, 29, 12, 48, 117, 27, 57, 121, 56, 251,
	52, 50, 51, 53, 101, 64, 1, 45, 44, 0,
	31, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 43,
	0, 0, 0, 46, 0, 0, 0, 49, 55, 54,
	32, 33, 38, 37, 34, 39, 35, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 30, 29,
	12, 48, 0, 0, 57, 0, 56, 0, 52, 50,
	51, 53, 0, 0, 0, 45, 44, 0, 31, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 43, 26, 0,
	0, 0, 0, 0, 0, 49, 55, 54, 32, 33,
	38, 37, 34, 39, 35, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 29, 12, 48,
	0, 0, 57, 0, 56, 0, 52, 50, 51, 53,
	0, 0, 0, 45, 44, 0, 31, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 43, 187, 0, 0, 0,
	0, 0, 0, 49, 55, 54, 32, 33, 38, 37,
	34, 39, 35, 36, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 29, 12, 48, 0, 200,
	57, 0, 56, 0, 52, 50, 51, 53, 0, 0,
	0, 45, 44, 0, 31, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 42, 0, 43, 187, 0, 0, 0, 0, 0,
	0, 49, 55, 54, 32, 33, 38, 37, 34, 39,
	35, 36, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 30, 29, 12, 48, 0, 0, 57, 0,
	56, 0, 52, 50, 51, 53, 0, 0, 0, 45,
	44, 0, 31, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 264, 0, 0, 0, 0, 0,
	0, 43, 187, 97, 96, 0, 86, 95, 94, 49,
	55, 54, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 85, 87, 83, 84, 69, 98, 0, 22,
	0, 70, 71, 72, 73, 75, 74, 76, 77, 78,
	79, 80, 81, 82, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 38,
	37, 34, 39, 35, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 30, 29, 12, 48, 0,
	0, 57, 0, 56, 0, 52, 50, 51, 53, 0,
	0, 0, 45, 44, 0, 31, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 42, 0, 43, 0, 0, 0, 0, 0,
	0, 0, 49, 55, 54, 32, 33, 38, 37, 34,
	39, 35, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 30, 29, 12, 48, 0, 0, 57,
	0, 56, 0, 52, 50, 51, 53, 0, 0, 0,
	45, 44, 0, 31, 394, 395, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 0, 0, 0,
	49, 55, 54, 0, 0, 97, 96, 0, 86, 95,
	94, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 85, 87, 83, 84, 69, 98,
	0, 0, 0, 70, 71, 72, 73, 75, 74, 76,
	77, 78, 79, 80, 81, 82, 250, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 96, 0, 86,
	95, 94, 0, 67, 0, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 85, 87, 83, 84, 69,
	98, 0, 0, 0, 70, 71, 72, 73, 75, 74,
	76, 77, 78, 79, 80, 81, 82, 12, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 96, 0, 86, 95, 94, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 85,
	87, 83, 84, 69, 98, 0, 0, 0, 70, 71,
	72, 73, 75, 74, 76, 77, 78, 79, 80, 81,
	82, 343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 96, 0, 86, 95, 94, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	85, 87, 83, 84, 69, 98, 0, 0, 0, 70,
	71, 72, 73, 75, 74, 76, 77, 78, 79, 80,
	81, 82, 341, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 96, 0, 86, 95, 94, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	85, 87, 83, 84, 69, 98, 320, 0, 0, 70,
	71, 72, 73, 75, 74, 76, 77, 78, 79, 80,
	81, 82, 97, 96, 0, 86, 95, 94, 0, 0,
	339, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 85, 87, 83, 84, 69, 98, 0, 0, 0,
	70, 71, 72, 73, 75, 74, 76, 77, 78, 79,
	80, 81, 82, 0, 0, 97, 96, 0, 86, 95,
	94, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 85, 87, 83, 84, 69, 98,
	0, 0, 0, 70, 71, 72, 73, 75, 74, 76,
	77, 78, 79, 80, 81, 82, 97, 96, 0, 86,
	95, 94, 0, 0, 309, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 85, 87, 83, 84, 69,
	98, 0, 0, 0, 70, 71, 72, 73, 75, 74,
	76, 77, 78, 79, 80, 81, 82, 301, 0, 0,
	0, 258, 0, 0, 0, 0, 97, 96, 0, 86,
	95, 94, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 85, 87, 83, 84, 69,
	98, 0, 0, 0, 70, 71, 72, 73, 75, 74,
	76, 77, 78, 79, 80, 81, 82, 97, 96, 0,
	86, 95, 94, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 85, 87, 83, 84,
	69, 98, 0, 0, 0, 70, 71, 72, 73, 75,
	74, 76, 77, 78, 79, 80, 81, 82, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 96,
	0, 86, 95, 94, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 85, 87, 83,
	84, 69, 98, 0, 0, 0, 70, 71, 72, 73,
	75, 74, 76, 77, 78, 79, 80, 81, 82, 97,
	96, 0, 86, 95, 94, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 85, 87,
	83, 84, 69, 98, 0, 0, 0, 70, 71, 72,
	73, 75, 74, 76, 77, 78, 79, 80, 81, 82,
	97, 96, 0, 86, 95, 94, 0, 0, 0, 0,
	0, 0, 0, 372, 89, 90, 91, 92, 93, 85,
	87, 83, 84, 69, 98, 0, 0, 0, 70, 71,
	72, 73, 75, 74, 76, 77, 78, 79, 80, 81,
	82, 96, 0, 86, 95, 94, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 85,
	87, 83, 84, 69, 98, 0, 0, 0, 70, 71,
	72, 73, 75, 74, 76, 77, 78, 79, 80, 81,
	82, 86, 95, 94, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 85, 87, 83,
	84, 69, 98, 0, 0, 0, 70, 71, 72, 73,
	75, 74, 76, 77, 78, 79, 80, 81, 82,
}

var yyPact = [...]int16{
	339, -1000, 342, 332, 376, 192, 197, 197, 378, 335,
	197, 331, -1000, -1000, -1000, 349, 445, 271, 330, 259,
	378, 375, 335, 251, -1000, 1032, -1000, -1000, -1000, 258,
	256, 880, 253, 250, 249, 248, 224, 222, 221, 217,
	216, 215, 214, 880, 880, 880, 880, -24, 802, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -72, 880, 213, 206,
	375, -1000, 378, 445, 373, 445, 164, 197, -1000, 200,
	880, 880, 880, 880, 880, 880, 880, 880, 880, 880,
	880, 880, 880, -53, -55, 37, -56, -57, 880, 880,
	880, 880, 880, 880, 62, 70, 880, 880, 112, 76,
	880, 50, 1942, 679, 880, 880, 265, 264, 263, 262,
	162, 367, 601, 375, -1000, 2061, 2061, 317, 1942, 197,
	-79, 156, -1000, 1942, 79, -1000, -97, 86, 1942, 880,
	375, 154, -1000, 208, 371, 189, 445, -1000, -24, -1000,
	-1000, 523, -77, 196, 184, -39, -39, -39, 28, 28,
	-20, -20, -20, -1000, -1000, 9, 8, -59, -1000, -1000,
	103, 103, 103, 103, 103, 103, 61, -60, -64, 36,
	-70, -71, 2061, 2023, -1000, 101, -1000, -1000, -1000, 880,
	130, -1000, 979, 46, 880, 138, 1942, -1000, 1901, 1850,
	188, 187, 175, 369, -1000, 716, 880, -1000, -1000, -1000,
	-1000, 129, 126, 197, 197, -1000, 87, 77, -1000, -1000,
	-1000, -72, 880, -1000, 880, 111, 1942, 104, -1000, 371,
	368, 880, 445, 445, -1000, 291, -1000, 288, 281, 280,
	287, -1000, 102, 93, -74, -75, -1000, 62, 5, 2,
	-76, -1000, -1000, -1000, -1000, -1000, -1000, 1809, 15, 15,
	-50, 42, 880, 880, 1759, -1000, 880, 880, 261, 880,
	880, 252, 880, 880, -1000, 880, 880, 1718, -1000, -1000,
	310, 322, -1000, -1000, -1000, 1942, 1942, -1000, 880, -1000,
	368, 348, 356, 1942, -1000, 270, -1000, -1000, -1000, 283,
	-1000, 279, -1000, -1000, -1000, -1000, -1000, -1000, -78, -95,
	-1000, 15, 17, 195, 17, 96, -1000, 1675, 1942, 880,
	1942, 1634, 94, 1584, 1533, 90, 1482, 1432, 1382, 1332,
	880, 197, 197, 1942, 348, 363, 880, 445, 880, -1000,
	-1000, -1000, -1000, 17, -1000, 165, 370, -1000, 15, 880,
	1942, -1000, -1000, 880, 880, 186, -1000, -1000, -1000, -1000,
	1282, -1000, -1000, 363, 346, 352, 1942, 182, 1983, -1000,
	307, 880, 17, 1942, 1232, 1182, 880, -1000, 346, 344,
	-50, 880, 880, 351, 1132, -1000, -1000, -1000, 1082, 344,
	-1000, -50, -1000, 161, -1000, 928, 103, 679, -1000, -1000,
	-1000, -1000, 880, 318, -1000, -1000, 160, -1000, -1000, 325,
	81, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 436, 0, 144, 12, 435, 13, 10, 434, 429,
	427, 9, 425, 424, 419, 418, 417, 416, 415, 43,
	4, 39, 414, 11, 6, 18, 15, 413, 3, 412,
	411, 14, 410, 347, 2, 1, 397, 396, 7, 5,
	394, 8, 392, 390, 161, 387,
}

var yyR1 = [...]int8{
	0, 1, 22, 21, 43, 43, 43, 5, 5, 14,
	14, 44, 44, 44, 15, 15, 25, 25, 25, 25,
	25, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 10, 10, 18, 18,
	33, 33, 33, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 24, 24, 32, 32, 28, 28,
	28, 29, 29, 29, 30, 30, 30, 31, 41, 41,
	37, 37, 37, 37, 37, 37, 37, 45, 45, 26,
	26, 27, 27, 27, 20, 19, 9, 9, 40, 40,
	8, 8, 11, 11, 6, 6, 7, 7, 23, 23,
	17, 17, 17, 16, 16, 16, 34, 36, 36, 35,
	35, 38, 38, 39, 39, 12, 12, 12, 12, 13,
	42, 42, 42,
}

var yyR2 = [...]int8{
	0, 4, 11, 10, 1, 3, 0, 2, 0, 1,
	0, 0, 3, 4, 6, 7, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 4, 4, 1, 3, 1, 1, 1, 0,
	5, 1, 0, 1, 7, 6, 6, 8, 5, 4,
	6, 6, 8, 8, 9, 6, 6, 3, 4, 6,
	6, 7, 3, 4, 5, 5, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 5, 3, 5, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 4, 6, 4, 6, 5,
	4, 4, 2, 2, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 0, 1, 3, 0, 3, 7, 0,
	1, 2, 2, 3, 2, 3, 2, 1, 2, 1,
	0, 2, 3, 7, 1, 1, 0, 2, 4, 5,
	0, 1, 0, 5, 0, 2, 0, 2, 0, 3,
	0, 2, 2, 0, 1, 1, 3, 3, 1, 0,
	3, 0, 2, 0, 2, 6, 6, 4, 4, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -43, 18, -14, -15, 16, 21, -22, 7,
	57, -19, 55, -19, -44, 6, -33, 19, -19, 21,
	-21, 20, 7, -24, -25, -2, 103, -12, -4, 54,
	53, 73, 35, 36, 39, 41, 42, 38, 37, 40,
	79, -19, 22, 102, 71, 70, 28, -3, 56, 110,
	64, 65, 63, 66, 112, 111, 61, 59, 52, 21,
	56, -44, -21, -33, -5, 57, 17, 21, -19, 90,
	95, 96, 97, 98, 100, 99, 101, 102, 103, 104,
	105, 106, 107, 88, 89, 86, 70, 87, 80, 81,
	82, 83, 84, 85, 72, 71, 68, 67, 91, 56,
	56, -8, -2, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, -2, -2, -2, -13, -2, 109,
	59, -10, -21, -2, -30, -31, 112, -29, -2, 56,
	56, -21, -44, -24, -26, -27, 8, -25, -3, -19,
	-19, 56, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 112, 112, 78, 112, 112,
	-2, -2, -2, -2, -2, -2, -4, 89, 88, 86,
	70, 87, -2, -2, 63, 71, 66, 64, 65, -18,
	103, 19, -2, -40, 74, -28, -2, 103, -2, -2,
	55, 55, 55, 55, 58, -2, -42, 32, 33, 34,
	58, -28, -21, 21, 29, -19, -20, 112, 110, 58,
	62, 57, 113, 60, 57, -32, -2, -21, 58, -26,
	-6, 9, -45, -37, 57, 48, 45, 49, 46, 47,
	51, -25, -21, -28, 94, 94, 112, 68, 112, 112,
	78, 112, 112, 63, 66, 64, 65, -2, 58, 58,
	57, -9, 74, 76, -2, 58, 57, 57, 21, 57,
	57, 56, 57, 8, 58, 57, 8, -2, 58, 58,
	-19, -19, 60, 60, -31, -2, -2, 58, 57, 58,
	-6, -23, 10, -2, -25, -25, 45, 45, 45, 50,
	45, 50, 45, 58, 58, 112, 112, -4, 94, 94,
	112, 58, -11, 93, -11, -20, 77, -2, -2, 75,
	-2, -2, 55, -2, -2, 55, -2, -2, -2, -2,
	8, 29, 21, -2, -23, -7, 13, 12, 52, 45,
	45, 112, 112, -11, -41, 92, 56, -41, 58, 75,
	-2, 58, 58, 57, 57, 58, 58, 58, 58, 58,
	-2, -19, -19, -7, -35, 11, -2, -24, -2, -41,
	56, 9, -11, -2, -2, -2, 57, 58, -35, -38,
	14, 12, 80, 30, -2, -41, 58, 58, -2, -38,
	-39, 15, -20, -36, -34, -2, -2, 12, 58, 58,
	-39, -20, 57, -16, 26, 27, -28, -34, -17, 23,
	-35, 24, 25, 58,
}

var yyDef = [...]int16{
	6, -2, 10, 4, 0, 9, 0, 0, 11, 42,
	0, 0, 145, 5, 1, 0, 0, 41, 0, 0,
	11, 0, 42, 8, 114, 18, 19, 20, 43, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 21, 0, 0, 0, 0, 0, 34, 0, 22,
	23, 24, 25, 26, 27, 28, 126, 123, 0, 0,
	0, 12, 11, 0, 140, 0, 0, 0, 17, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 102, 103, 0, 179, 0,
	0, 0, 36, 37, 0, 124, 0, 0, 121, 0,
	0, 0, 13, 140, 154, 139, 0, 115, 7, 21,
	16, 0, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 82, 84, 0, 86, 87,
	88, 89, 90, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 0, 108, 110, 112, 0,
	0, 38, 0, 146, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 180, 181, 182,
	62, 0, 0, 0, 0, 31, 0, 0, 144, 35,
	29, 0, 0, 30, 0, 0, 116, 0, 14, 154,
	158, 0, 0, 0, 137, 0, 130, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 85, 0, 95, 97,
	0, 100, 101, 107, 109, 111, 113, 0, 152, 152,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 63, 66,
	177, 178, 32, 33, 125, 127, 122, 40, 0, 15,
	158, 156, 0, 155, 142, 0, 138, 131, 132, 0,
	134, 0, 136, 64, 65, 81, 83, 94, 0, 0,
	99, 152, 129, 0, 129, 0, 48, 0, 147, 0,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 156, 169, 0, 0, 0, 133,
	135, 96, 98, 129, 45, 0, 0, 46, 152, 0,
	148, 50, 51, 0, 0, 0, 55, 56, 59, 60,
	0, 175, 176, 169, 171, 0, 157, 159, 0, 44,
	0, 0, 129, 149, 0, 0, 0, 61, 171, 173,
	0, 0, 0, 0, 0, 47, 52, 53, 0, 173,
	2, 0, 172, 170, 168, 163, -2, 0, 153, 54,
	3, 174, 0, 160, 164, 165, 169, 167, 166, 0,
	0, 161, 162, 128,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 105, 97, 3,
	56, 58, 103, 101, 57, 102, 109, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 113, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 59, 3, 60, 96, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 61, 95, 62, 70,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 63, 64, 65, 66, 67, 68,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 98, 99, 100, 106, 107, 108,
	110, 111, 112,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:128
		{
			query, err := buildQuery(yyDollar[1].str, yyDollar[2].with, yyDollar[3].selinto, yyDollar[4].unions)
			if err != nil {
				yylex.Error(err.Error())
			}

			yylex.(*scanner).result = query
		}
	case 2:
		yyDollar = yyS[yypt-11 : yypt+1]
//line partiql.y:139
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.selinto.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[5].from, Where: yyDollar[6].expr, GroupBy: yyDollar[7].bindings, Having: yyDollar[8].expr, OrderBy: yyDollar[9].orders, Limit: yyDollar[10].exprint, Offset: yyDollar[11].exprint}
			yyVAL.selinto.into = yyDollar[4].expr
		}
	case 3:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:147
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:153
		{
			yyVAL.str = "default"
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:154
		{
			yyVAL.str = yyDollar[3].str
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:155
		{
			yyVAL.str = ""
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:158
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:158
		{
			yyVAL.expr = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.with = yyDollar[1].with
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:161
		{
			yyVAL.with = nil
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:164
		{
			yyVAL.unions = []unionItem{}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:165
		{
			yyVAL.unions = append(yyVAL.unions, unionItem{typ: expr.UnionDistinct, sel: yyDollar[2].sel})
			yyVAL.unions = append(yyVAL.unions, yyDollar[3].unions...)
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:169
		{
			yyVAL.unions = append(yyVAL.unions, unionItem{typ: expr.UnionAll, sel: yyDollar[3].sel})
			yyVAL.unions = append(yyVAL.unions, yyDollar[4].unions...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:175
		{
			yyVAL.with = []expr.CTE{{Table: yyDollar[2].str, As: yyDollar[5].sel}}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:176
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{Table: yyDollar[3].str, As: yyDollar[6].sel})
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:182
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:183
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:184
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:185
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:186
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:190
		{
			yyVAL.expr = expr.Ident(yyDollar[1].str)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:191
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:192
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:193
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:194
		{
			yyVAL.expr = expr.Null{}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:195
		{
			yyVAL.expr = expr.Missing{}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:196
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:197
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:198
		{
			yyVAL.expr = expr.Call(expr.MakeStruct, yyDollar[2].values...)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:199
		{
			yyVAL.expr = expr.Call(expr.MakeList, yyDollar[2].values...)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:200
		{
			yyVAL.expr = &expr.Dot{Inner: yyDollar[1].expr, Field: yyDollar[3].str}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:201
		{
			yyVAL.expr = &expr.Index{Inner: yyDollar[1].expr, Offset: yyDollar[3].integer}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:202
		{
			yyVAL.expr = &expr.Dot{Inner: yyDollar[1].expr, Field: yyDollar[3].str}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:214
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:215
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:218
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:219
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:222
		{
			yyVAL.yesno = true
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:222
		{
			yyVAL.yesno = false
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:225
		{
			yyVAL.values = yyDollar[4].values
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:226
		{
			yyVAL.values = []expr.Node{}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:227
		{
			yyVAL.values = nil
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:233
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:237
		{
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:245
		{
			distinct := false
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:254
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, expr.ApproxCountDistinctDefaultPrecision, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:262
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, yyDollar[5].integer, yyDollar[7].expr, yyDollar[8].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:270
		{
			yyVAL.expr = createCase(yyDollar[2].expr, yyDollar[3].limbs, yyDollar[4].expr)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:274
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:278
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:282
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
			}
			yyVAL.expr = nod
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:290
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_ADD")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:298
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_DIFF")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line partiql.y:306
		{
			dow, ok := weekday(yyDollar[5].str)
			if strings.ToUpper(yyDollar[3].str) != "WEEK" || !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q(%q)", yyDollar[3].str, yyDollar[5].str))
			}
			yyVAL.expr = expr.DateTruncWeekday(yyDollar[8].expr, dow)
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:314
		{
			part, ok := timePartFor(yyDollar[3].str, "DATE_TRUNC")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:322
		{
			part, ok := timePartFor(yyDollar[3].str, "EXTRACT")
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:330
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:334
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, nil)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:342
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, yyDollar[5].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:350
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[5].expr, yyDollar[3].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:358
		{
			node, err := createTrimInvocation(yyDollar[3].integer, yyDollar[6].expr, yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:366
		{
			op := expr.CallByName(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:374
		{
			op := expr.CallByName(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:382
		{
			yyVAL.expr = expr.Call(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:386
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:390
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:394
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:398
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:402
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:406
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:410
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:414
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:418
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:422
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:426
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:430
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:434
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:438
		{
			yyVAL.expr = expr.Call(expr.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:442
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:446
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:450
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.Ilike, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str, Escape: yyDollar[5].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:454
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.Ilike, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:458
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.Like, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str, Escape: yyDollar[5].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:462
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.Like, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:466
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.SimilarTo, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:470
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.RegexpMatch, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:474
		{
			yyVAL.expr = &expr.StringMatch{Op: expr.RegexpMatchCi, Expr: yyDollar[1].expr, Pattern: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:478
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:482
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:486
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:490
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:494
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:498
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:502
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:506
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.Like, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str}}
		}
	case 96:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:510
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.Like, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str, Escape: yyDollar[6].str}}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:514
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.Like, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str}}
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:518
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.Ilike, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str, Escape: yyDollar[6].str}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:522
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.SimilarTo, Expr: yyDollar[1].expr, Pattern: yyDollar[5].str}}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:526
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.RegexpMatch, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str}}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:530
		{
			yyVAL.expr = &expr.Not{Expr: &expr.StringMatch{Op: expr.RegexpMatchCi, Expr: yyDollar[1].expr, Pattern: yyDollar[4].str}}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:534
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:538
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:542
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:546
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:550
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:554
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:558
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:562
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:566
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:570
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:574
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:578
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:584
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:585
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:589
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:590
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:594
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:595
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:596
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:600
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:601
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:602
		{
			yyVAL.values = nil
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:606
		{
			yyVAL.values = yyDollar[1].values
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:607
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].values...)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:608
		{
			yyVAL.values = nil
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:612
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 128:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:616
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:619
		{
			yyVAL.wind = nil
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:622
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:623
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:624
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:625
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:626
		{
			yyVAL.jk = expr.RightJoin
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:627
		{
			yyVAL.jk = expr.RightJoin
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:628
		{
			yyVAL.jk = expr.FullJoin
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:633
		{
			yyVAL.from = yyDollar[1].from
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:634
		{
			yyVAL.from = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:641
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:642
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:644
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:647
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:659
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:660
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:663
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:664
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:667
		{
			yyVAL.expr = nil
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:668
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:671
		{
			yyVAL.expr = nil
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:672
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:675
		{
			yyVAL.expr = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:676
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:679
		{
			yyVAL.expr = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:683
		{
			yyVAL.bindings = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:684
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:688
		{
			yyVAL.yesno = false
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:689
		{
			yyVAL.yesno = false
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:690
		{
			yyVAL.yesno = true
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:694
		{
			yyVAL.yesno = false
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:695
		{
			yyVAL.yesno = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:696
		{
			yyVAL.yesno = true
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:700
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:703
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:704
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:707
		{
			yyVAL.orders = nil
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:708
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:711
		{
			yyVAL.exprint = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:712
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:715
		{
			yyVAL.exprint = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:716
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:719
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			at := yyDollar[6].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:720
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[6].str
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:721
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: nil}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:722
		{ /*Cloning, as the buffer gets overwritten*/
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: nil, At: &at}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:725
		{
			yyVAL.expr = &expr.Table{Binding: expr.Bind(yyDollar[1].expr, "")}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:729
		{
			yyVAL.integer = trimLeading
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:730
		{
			yyVAL.integer = trimTrailing
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:731
		{
			yyVAL.integer = trimBoth
		}
	}
	goto yystack /* stack new state and value */
}
