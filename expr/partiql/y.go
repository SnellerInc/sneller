// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const UNPIVOT = 57369
const AT = 57370
const PARTITION = 57371
const VALUE = 57372
const LEADING = 57373
const TRAILING = 57374
const BOTH = 57375
const COALESCE = 57376
const NULLIF = 57377
const EXTRACT = 57378
const DATE_TRUNC = 57379
const CAST = 57380
const UTCNOW = 57381
const DATE_ADD = 57382
const DATE_DIFF = 57383
const EARLIEST = 57384
const LATEST = 57385
const JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const CROSS = 57389
const INNER = 57390
const OUTER = 57391
const FULL = 57392
const ON = 57393
const AGGREGATE = 57394
const ID = 57395
const NULL = 57396
const TRUE = 57397
const FALSE = 57398
const MISSING = 57399
const OR = 57400
const AND = 57401
const NOT = 57402
const BETWEEN = 57403
const CASE = 57404
const WHEN = 57405
const THEN = 57406
const ELSE = 57407
const END = 57408
const TO = 57409
const TRIM = 57410
const EQ = 57411
const NE = 57412
const LT = 57413
const LE = 57414
const GT = 57415
const GE = 57416
const SIMILAR = 57417
const REGEXP_MATCH_CI = 57418
const ILIKE = 57419
const LIKE = 57420
const IN = 57421
const IS = 57422
const OVER = 57423
const FILTER = 57424
const SHIFT_LEFT_LOGICAL = 57425
const SHIFT_RIGHT_ARITHMETIC = 57426
const SHIFT_RIGHT_LOGICAL = 57427
const CONCAT = 57428
const APPEND = 57429
const NEGATION_PRECEDENCE = 57430
const NUMBER = 57431
const ION = 57432
const STRING = 57433

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"UNPIVOT",
	"AT",
	"PARTITION",
	"VALUE",
	"LEADING",
	"TRAILING",
	"BOTH",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"TRIM",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 353,
	65, 72,
	66, 72,
	68, 72,
	69, 72,
	70, 72,
	78, 72,
	79, 72,
	80, 72,
	81, 72,
	82, 72,
	83, 72,
	-2, 127,
}

const yyPrivate = 57344

const yyLast = 1908

var yyAct = [...]int16{
	15, 347, 351, 326, 192, 338, 266, 303, 174, 310,
	13, 209, 283, 122, 100, 117, 204, 9, 14, 18,
	281, 118, 229, 111, 65, 66, 67, 68, 69, 70,
	71, 228, 226, 105, 106, 107, 225, 223, 109, 30,
	112, 115, 147, 146, 7, 144, 11, 143, 67, 68,
	69, 70, 71, 193, 194, 57, 101, 70, 71, 103,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 125, 169, 103, 121, 284, 148, 149,
	150, 151, 152, 153, 311, 227, 160, 161, 145, 236,
	224, 173, 175, 177, 178, 127, 128, 158, 90, 171,
	184, 172, 175, 154, 202, 255, 254, 194, 102, 203,
	190, 371, 358, 157, 159, 156, 155, 315, 200, 54,
	206, 201, 124, 127, 102, 241, 279, 327, 195, 278,
	175, 199, 162, 165, 166, 164, 264, 263, 222, 265,
	163, 256, 191, 220, 207, 241, 252, 31, 230, 232,
	233, 231, 235, 221, 241, 240, 168, 186, 187, 188,
	21, 22, 27, 26, 23, 28, 24, 25, 234, 54,
	55, 241, 237, 238, 208, 198, 183, 246, 19, 8,
	39, 332, 49, 40, 245, 41, 251, 45, 43, 44,
	46, 244, 6, 312, 34, 33, 129, 20, 120, 119,
	104, 260, 99, 29, 98, 262, 253, 8, 54, 97,
	259, 268, 8, 39, 96, 95, 94, 93, 261, 92,
	45, 43, 44, 46, 91, 32, 88, 52, 289, 182,
	269, 270, 181, 42, 48, 47, 257, 258, 126, 180,
	286, 179, 287, 288, 280, 290, 291, 292, 293, 306,
	294, 295, 61, 62, 64, 63, 65, 66, 67, 68,
	69, 70, 71, 50, 127, 302, 42, 48, 47, 297,
	298, 308, 307, 301, 60, 61, 62, 64, 63, 65,
	66, 67, 68, 69, 70, 71, 313, 215, 217, 218,
	214, 216, 277, 219, 275, 309, 273, 322, 213, 276,
	272, 274, 271, 342, 196, 328, 299, 330, 369, 370,
	366, 300, 197, 325, 51, 12, 329, 334, 335, 331,
	62, 64, 63, 65, 66, 67, 68, 69, 70, 71,
	10, 4, 337, 348, 343, 339, 304, 354, 340, 323,
	324, 352, 353, 305, 349, 346, 327, 267, 333, 210,
	356, 247, 124, 357, 31, 175, 113, 5, 211, 352,
	37, 364, 363, 362, 185, 368, 367, 21, 22, 27,
	26, 23, 28, 24, 25, 89, 212, 250, 350, 205,
	116, 114, 123, 167, 365, 19, 8, 39, 359, 3,
	40, 2, 41, 35, 45, 43, 44, 46, 36, 108,
	17, 34, 33, 110, 20, 170, 53, 38, 1, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 248, 0, 0, 0, 0,
	0, 0, 32, 16, 86, 85, 0, 75, 84, 83,
	42, 48, 47, 0, 0, 0, 0, 77, 78, 79,
	80, 81, 82, 74, 76, 72, 73, 58, 87, 0,
	113, 59, 60, 61, 62, 64, 63, 65, 66, 67,
	68, 69, 70, 71, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 22, 27,
	26, 23, 28, 24, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 19, 8, 39, 0, 0,
	40, 0, 41, 0, 45, 43, 44, 46, 0, 0,
	0, 34, 33, 0, 20, 0, 0, 0, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 0, 32, 176, 0, 0, 0, 0, 0, 0,
	42, 48, 47, 21, 22, 27, 26, 23, 28, 24,
	25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, 8, 39, 0, 189, 40, 0, 41, 0,
	45, 43, 44, 46, 0, 0, 0, 34, 33, 0,
	20, 0, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 0, 32, 176,
	0, 0, 0, 0, 0, 0, 42, 48, 47, 21,
	22, 27, 26, 23, 28, 24, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19, 8, 39,
	0, 0, 40, 0, 41, 0, 45, 43, 44, 46,
	0, 0, 0, 34, 33, 0, 20, 360, 361, 0,
	0, 0, 29, 74, 76, 72, 73, 58, 87, 0,
	0, 59, 60, 61, 62, 64, 63, 65, 66, 67,
	68, 69, 70, 71, 32, 176, 0, 0, 0, 0,
	0, 0, 42, 48, 47, 0, 0, 86, 85, 0,
	75, 84, 83, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 79, 80, 81, 82, 74, 76, 72, 73,
	58, 87, 0, 113, 59, 60, 61, 62, 64, 63,
	65, 66, 67, 68, 69, 70, 71, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	21, 22, 27, 26, 23, 28, 24, 25, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 19, 8,
	39, 56, 0, 40, 0, 41, 0, 45, 43, 44,
	46, 0, 0, 0, 34, 33, 0, 20, 0, 0,
	0, 0, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 32, 86, 85, 0, 75,
	84, 83, 0, 42, 48, 47, 0, 0, 0, 77,
	78, 79, 80, 81, 82, 74, 76, 72, 73, 58,
	87, 0, 0, 59, 60, 61, 62, 64, 63, 65,
	66, 67, 68, 69, 70, 71, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	22, 27, 26, 23, 28, 24, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19, 8, 39,
	0, 0, 40, 0, 41, 0, 45, 43, 44, 46,
	0, 0, 0, 34, 33, 0, 20, 0, 0, 0,
	0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 85, 32, 75, 84, 83, 0, 0,
	0, 0, 42, 48, 47, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 345, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 85, 0, 75, 84, 83, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 79, 80, 81, 82,
	74, 76, 72, 73, 58, 87, 0, 0, 59, 60,
	61, 62, 64, 63, 65, 66, 67, 68, 69, 70,
	71, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 85, 0, 75, 84, 83, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 79, 80, 81, 82, 74,
	76, 72, 73, 58, 87, 0, 0, 59, 60, 61,
	62, 64, 63, 65, 66, 67, 68, 69, 70, 71,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	85, 0, 75, 84, 83, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 79, 80, 81, 82, 74, 76,
	72, 73, 58, 87, 0, 0, 59, 60, 61, 62,
	64, 63, 65, 66, 67, 68, 69, 70, 71, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 85,
	0, 75, 84, 83, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 79, 80, 81, 82, 74, 76, 72,
	73, 58, 87, 0, 0, 59, 60, 61, 62, 64,
	63, 65, 66, 67, 68, 69, 70, 71, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 85, 0,
	75, 84, 83, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 79, 80, 81, 82, 74, 76, 72, 73,
	58, 87, 0, 0, 59, 60, 61, 62, 64, 63,
	65, 66, 67, 68, 69, 70, 71, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 85, 0, 75,
	84, 83, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 79, 80, 81, 82, 74, 76, 72, 73, 58,
	87, 0, 0, 59, 60, 61, 62, 64, 63, 65,
	66, 67, 68, 69, 70, 71, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 85, 0, 75, 84,
	83, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	79, 80, 81, 82, 74, 76, 72, 73, 58, 87,
	0, 0, 59, 60, 61, 62, 64, 63, 65, 66,
	67, 68, 69, 70, 71, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 85, 0, 75, 84,
	83, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	79, 80, 81, 82, 74, 76, 72, 73, 58, 87,
	0, 0, 59, 60, 61, 62, 64, 63, 65, 66,
	67, 68, 69, 70, 71, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 85, 0, 75, 84,
	83, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	79, 80, 81, 82, 74, 76, 72, 73, 58, 87,
	0, 0, 59, 60, 61, 62, 64, 63, 65, 66,
	67, 68, 69, 70, 71, 314, 296, 0, 0, 0,
	0, 0, 0, 0, 86, 85, 0, 75, 84, 83,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 79,
	80, 81, 82, 74, 76, 72, 73, 58, 87, 0,
	0, 59, 60, 61, 62, 64, 63, 65, 66, 67,
	68, 69, 70, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 75, 84, 83, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 79, 80,
	81, 82, 74, 76, 72, 73, 58, 87, 0, 0,
	59, 60, 61, 62, 64, 63, 65, 66, 67, 68,
	69, 70, 71, 86, 85, 0, 75, 84, 83, 0,
	0, 285, 0, 0, 0, 0, 77, 78, 79, 80,
	81, 82, 74, 76, 72, 73, 58, 87, 0, 0,
	59, 60, 61, 62, 64, 63, 65, 66, 67, 68,
	69, 70, 71, 282, 0, 0, 0, 243, 0, 0,
	0, 0, 86, 85, 0, 75, 84, 83, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 86, 85, 0, 75, 84, 83, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 75, 84, 83, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 86, 85, 0, 75, 84, 83, 0, 0,
	239, 0, 0, 0, 0, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 86, 85, 0, 75, 84, 83, 0, 0,
	0, 0, 0, 0, 0, 341, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 86, 85, 0, 75, 84, 83, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 79, 80, 81,
	82, 74, 76, 72, 73, 58, 87, 0, 0, 59,
	60, 61, 62, 64, 63, 65, 66, 67, 68, 69,
	70, 71, 85, 0, 75, 84, 83, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 79, 80, 81, 82,
	74, 76, 72, 73, 58, 87, 0, 0, 59, 60,
	61, 62, 64, 63, 65, 66, 67, 68, 69, 70,
	71, 75, 84, 83, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 79, 80, 81, 82, 74, 76, 72,
	73, 58, 87, 0, 0, 59, 60, 61, 62, 64,
	63, 65, 66, 67, 68, 69, 70, 71,
}

var yyPact = [...]int16{
	315, -1000, 350, 137, 154, 312, 154, 295, -1000, 333,
	212, 294, 173, 153, -1000, 771, -1000, -1000, -1000, 172,
	26, 170, 165, 163, 162, 161, 160, 155, 150, 148,
	2, 146, 855, 855, 855, -1000, -1000, 855, -1000, 736,
	855, -88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	145, 144, 349, 344, 333, 154, 154, -1000, 142, 855,
	855, 855, 855, 855, 855, 855, 855, 855, 855, 855,
	855, 855, -62, -64, 12, -66, -67, 855, 855, 855,
	855, 855, 855, 159, 29, 855, 855, 71, 56, 27,
	855, 605, 855, 855, 188, 186, 179, 176, 120, 126,
	-1000, 529, 154, 0, 349, -1000, 1803, 1803, 284, 1727,
	119, -1000, 1727, 312, 63, 1727, 49, -1000, -94, 855,
	349, 118, 340, 243, 333, -1000, -1000, 18, -1000, 453,
	181, 158, 225, -74, -74, -74, -52, -52, -46, -46,
	-46, -1000, -1000, -1000, -1000, -72, -1000, -1000, 599, 599,
	599, 599, 599, 599, 24, -73, -77, 9, -78, -87,
	1803, 1766, -1000, 87, -1000, -1000, -1000, 855, 96, -1000,
	14, 855, 855, 1647, 99, 1727, -1000, 1607, 1557, 136,
	129, 122, 343, -1000, 369, 855, -1000, -1000, -1000, -1000,
	90, 18, 48, 47, -1000, 85, 154, 154, -1000, 333,
	855, -1000, -88, -1000, 855, 81, 1727, 83, -1000, 337,
	855, 333, 333, -1000, 258, -1000, 256, 252, 250, 248,
	-1000, 73, 70, -1000, 159, -1000, -1000, -89, -1000, -1000,
	-1000, -1000, -1000, -1000, 1517, -14, -1000, 1468, 1727, 855,
	-1000, 855, 855, 175, 855, 855, 855, 855, -1000, 855,
	855, 1428, -1000, -1000, 18, 18, -1000, 278, 291, 114,
	1727, -1000, 1727, -1000, 855, -1000, 323, 331, 1727, -1000,
	198, -1000, -1000, -1000, 228, -1000, 227, -1000, -1000, -1000,
	-1000, -1000, -14, -6, 139, 855, 1727, 1727, 1379, 61,
	1330, 1280, 1230, 1181, 1132, 1083, 855, -1000, -1000, 154,
	154, 340, 1727, 335, 855, 333, 855, -1000, -1000, -6,
	-1000, 127, 339, 1727, -1000, -1000, 855, 855, -1000, -1000,
	-1000, -1000, 1034, -1000, -1000, 337, 321, 326, 1727, 64,
	1687, -1000, 274, 855, 985, 936, -1000, 323, 318, -53,
	855, 855, 325, 887, -1000, -1000, 335, -1000, -53, -1000,
	57, -1000, 652, 599, 605, -1000, 321, -1000, 855, 288,
	-1000, -1000, 116, 318, -1000, -1000, 285, 55, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 408, 0, 407, 19, 182, 406, 11, 7, 405,
	403, 12, 400, 399, 398, 393, 391, 389, 14, 388,
	384, 383, 39, 4, 23, 6, 10, 18, 13, 382,
	8, 381, 380, 15, 379, 17, 2, 3, 378, 376,
	5, 1, 375, 9, 364, 358,
}

var yyR1 = [...]int8{
	0, 1, 24, 6, 6, 16, 16, 17, 17, 27,
	27, 27, 27, 27, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 10, 10, 21, 21, 35,
	35, 35, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 26, 26,
	34, 34, 30, 30, 30, 31, 31, 31, 32, 32,
	32, 33, 43, 43, 39, 39, 39, 39, 39, 39,
	39, 45, 45, 28, 28, 29, 29, 29, 23, 18,
	18, 18, 18, 22, 9, 9, 42, 42, 11, 11,
	7, 7, 8, 8, 25, 25, 20, 20, 20, 19,
	19, 19, 36, 38, 38, 37, 37, 40, 40, 41,
	41, 12, 12, 12, 12, 13, 14, 15, 44, 44,
	44,
}

var yyR2 = [...]int8{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 0, 5,
	1, 0, 1, 7, 6, 4, 4, 6, 6, 8,
	8, 6, 6, 3, 4, 6, 6, 7, 3, 4,
	5, 5, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 4,
	4, 5, 4, 4, 2, 2, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 1, 3, 0, 1, 3,
	0, 3, 7, 0, 1, 2, 2, 3, 2, 3,
	2, 1, 2, 1, 0, 2, 3, 7, 1, 0,
	3, 4, 4, 1, 0, 2, 4, 5, 0, 5,
	0, 2, 0, 2, 0, 3, 0, 2, 2, 0,
	1, 1, 3, 3, 1, 0, 3, 0, 2, 0,
	2, 6, 6, 4, 4, 1, 3, 3, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -1, -16, -17, 16, 7, 55, -22, 53, -35,
	18, -22, 20, -26, -27, -2, 100, -12, -4, 52,
	71, 34, 35, 38, 40, 41, 37, 36, 39, 77,
	-22, 21, 99, 69, 68, -15, -14, 27, -3, 54,
	57, 59, 107, 62, 63, 61, 64, 109, 108, -5,
	51, 20, 54, -6, 55, 17, 20, -22, 88, 92,
	93, 94, 95, 97, 96, 98, 99, 100, 101, 102,
	103, 104, 86, 87, 84, 68, 85, 78, 79, 80,
	81, 82, 83, 70, 69, 66, 65, 89, 54, -42,
	72, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	-18, 54, 106, 57, 54, -2, -2, -2, -13, -2,
	-10, -24, -2, 7, -31, -2, -32, -33, 109, 54,
	54, -24, -28, -29, 8, -27, -5, -22, -22, 54,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 109, 109, 76, 109, 109, -2, -2,
	-2, -2, -2, -2, -4, 87, 86, 84, 68, 85,
	-2, -2, 61, 69, 64, 62, 63, -21, 100, 18,
	-9, 72, 74, -2, -30, -2, 100, -2, -2, 53,
	53, 53, 53, 56, -2, -44, 31, 32, 33, 56,
	-30, -22, -23, 53, 107, -24, 20, 28, 56, -35,
	55, 58, 55, 60, 110, -34, -2, -24, 56, -7,
	9, -45, -39, 55, 47, 44, 48, 45, 46, 50,
	-27, -24, -30, 109, 66, 109, 109, 76, 109, 109,
	61, 64, 62, 63, -2, 56, 75, -2, -2, 73,
	56, 55, 55, 20, 55, 55, 55, 8, 56, 55,
	8, -2, 56, -18, 58, 58, 56, -22, -22, -26,
	-2, -33, -2, 56, 55, 56, -25, 10, -2, -27,
	-27, 44, 44, 44, 49, 44, 49, 44, 56, 56,
	-4, 109, 56, -11, 91, 73, -2, -2, -2, 53,
	-2, -2, -2, -2, -2, -2, 8, -18, -18, 28,
	20, -28, -2, -8, 13, 12, 51, 44, 44, -11,
	-43, 90, 54, -2, 56, 56, 55, 55, 56, 56,
	56, 56, -2, -22, -22, -7, -37, 11, -2, -26,
	-2, -43, 54, 9, -2, -2, 56, -25, -40, 14,
	12, 78, 29, -2, 56, 56, -8, -41, 15, -23,
	-38, -36, -2, -2, 12, 56, -37, -23, 55, -19,
	25, 26, -30, -40, -36, -20, 22, -37, -41, 23,
	24, 56,
}

var yyDef = [...]int16{
	6, -2, 0, 5, 0, 31, 0, 0, 133, 0,
	30, 0, 0, 4, 98, 11, 12, 13, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 96, 97, 0, 23, 0,
	107, 110, 15, 16, 17, 18, 19, 20, 21, 22,
	0, 0, 0, 124, 0, 0, 0, 10, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 0, 0, 0, 0, 66, 84, 85, 0, 165,
	0, 25, 26, 31, 0, 105, 0, 108, 0, 0,
	0, 0, 140, 123, 0, 99, 3, 129, 9, 0,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 67, 68, 0, 70, 71, 72, 73,
	74, 75, 76, 77, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 0, 90, 92, 94, 0, 0, 27,
	0, 0, 0, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 168, 169, 170, 48,
	0, 129, 0, 0, 128, 0, 0, 0, 24, 0,
	0, 167, 0, 166, 0, 0, 100, 0, 7, 144,
	0, 0, 0, 121, 0, 114, 0, 0, 0, 0,
	125, 0, 0, 69, 0, 79, 80, 0, 82, 83,
	89, 91, 93, 95, 0, 138, 35, 0, 135, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 49, 130, 129, 129, 52, 163, 164, 124,
	106, 109, 111, 29, 0, 8, 142, 0, 141, 126,
	0, 122, 115, 116, 0, 118, 0, 120, 50, 51,
	78, 81, 138, 113, 0, 0, 136, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 132, 0,
	0, 140, 101, 155, 0, 0, 0, 117, 119, 113,
	34, 0, 0, 137, 37, 38, 0, 0, 41, 42,
	45, 46, 0, 161, 162, 144, 157, 0, 143, 145,
	0, 33, 0, 0, 0, 0, 47, 142, 159, 0,
	0, 0, 0, 0, 39, 40, 155, 1, 0, 158,
	156, 154, 149, -2, 0, 139, 157, 160, 0, 146,
	150, 151, 155, 159, 153, 152, 0, 0, 2, 147,
	148, 112,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 67, 3, 3, 3, 102, 94, 3,
	54, 56, 100, 98, 55, 99, 106, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 110, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 57, 3, 58, 93, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 59, 92, 60, 68,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 61, 62, 63, 64, 65, 66, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 95, 96, 97, 103, 104, 105, 107, 108, 109,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:121
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			distinct, distinctExpr := decodeDistinct(yyDollar[3].values)
			yylex.(*scanner).result = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:130
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:136
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:136
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:139
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:139
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:142
		{
			yyVAL.with = []expr.CTE{{Table: yyDollar[2].str, As: yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:143
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{Table: yyDollar[3].str, As: yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:149
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:150
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:151
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:152
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:153
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:156
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:162
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:163
		{
			yyVAL.expr = expr.Null{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:164
		{
			yyVAL.expr = expr.Missing{}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:165
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:166
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:167
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:179
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:180
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:183
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:184
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:187
		{
			yyVAL.yesno = true
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:187
		{
			yyVAL.yesno = false
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:190
		{
			yyVAL.values = yyDollar[4].values
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:191
		{
			yyVAL.values = []expr.Node{}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:192
		{
			yyVAL.values = nil
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:198
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:202
		{
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:210
		{
			distinct := false
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:219
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:223
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:227
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:231
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
			}
			yyVAL.expr = nod
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:239
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:247
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:255
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:263
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:271
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:275
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, nil)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:283
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, yyDollar[5].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:291
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[5].expr, yyDollar[3].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:299
		{
			node, err := createTrimInvocation(yyDollar[3].integer, yyDollar[6].expr, yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:307
		{
			op := expr.Call(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:315
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:323
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:327
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:331
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:335
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:339
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:343
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:347
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:351
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:355
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:359
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:363
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:367
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:371
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:375
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:379
		{
			yyVAL.expr = expr.CallOp(expr.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:383
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:387
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:391
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:395
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:399
		{
			yyVAL.expr = expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[4].str))
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:403
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:407
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:411
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:415
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:419
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:423
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:427
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:431
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:435
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:439
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:443
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:447
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[5].str))}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:451
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:455
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:459
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:463
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:467
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:471
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:475
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:479
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:483
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:487
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:491
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:495
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:499
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:503
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:508
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:513
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:519
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:520
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:524
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:525
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:529
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:530
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:531
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:535
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:536
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:537
		{
			yyVAL.values = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:541
		{
			yyVAL.values = yyDollar[1].values
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:542
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].values...)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:543
		{
			yyVAL.values = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:547
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:551
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:554
		{
			yyVAL.wind = nil
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:557
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:558
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:559
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:560
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:561
		{
			yyVAL.jk = expr.RightJoin
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:562
		{
			yyVAL.jk = expr.RightJoin
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:563
		{
			yyVAL.jk = expr.FullJoin
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:568
		{
			yyVAL.from = yyDollar[1].from
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:569
		{
			yyVAL.from = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:576
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:577
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:579
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:582
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:585
		{
			yyVAL.pc = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:586
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:587
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:588
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:597
		{
			yyVAL.str = yyDollar[1].str
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:600
		{
			yyVAL.expr = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:604
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:605
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:608
		{
			yyVAL.expr = nil
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:609
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:612
		{
			yyVAL.expr = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:613
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:616
		{
			yyVAL.expr = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:617
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:620
		{
			yyVAL.bindings = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:621
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:625
		{
			yyVAL.yesno = false
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:626
		{
			yyVAL.yesno = false
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:627
		{
			yyVAL.yesno = true
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:631
		{
			yyVAL.yesno = false
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:632
		{
			yyVAL.yesno = false
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:633
		{
			yyVAL.yesno = true
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:637
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:640
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:641
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:644
		{
			yyVAL.orders = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:645
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:648
		{
			yyVAL.exprint = nil
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:649
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:652
		{
			yyVAL.exprint = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:653
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:656
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			at := yyDollar[6].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:657
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[6].str
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:658
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: nil}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:659
		{ /*Cloning, as the buffer gets overwritten*/
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: nil, At: &at}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:662
		{
			yyVAL.expr = &expr.Table{Binding: expr.Bind(yyDollar[1].expr, "")}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:665
		{
			yyVAL.expr = expr.Call("MAKE_STRUCT", yyDollar[2].values...)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:668
		{
			yyVAL.expr = expr.Call("MAKE_LIST", yyDollar[2].values...)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:671
		{
			yyVAL.integer = trimLeading
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:672
		{
			yyVAL.integer = trimTrailing
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:673
		{
			yyVAL.integer = trimBoth
		}
	}
	goto yystack /* stack new state and value */
}
