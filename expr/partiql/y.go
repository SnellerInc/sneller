// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const UNPIVOT = 57369
const AT = 57370
const PARTITION = 57371
const VALUE = 57372
const LEADING = 57373
const TRAILING = 57374
const BOTH = 57375
const COALESCE = 57376
const NULLIF = 57377
const EXTRACT = 57378
const DATE_TRUNC = 57379
const CAST = 57380
const UTCNOW = 57381
const DATE_ADD = 57382
const DATE_DIFF = 57383
const EARLIEST = 57384
const LATEST = 57385
const JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const CROSS = 57389
const INNER = 57390
const OUTER = 57391
const FULL = 57392
const ON = 57393
const APPROX_COUNT_DISTINCT = 57394
const AGGREGATE = 57395
const ID = 57396
const NULL = 57397
const TRUE = 57398
const FALSE = 57399
const MISSING = 57400
const OR = 57401
const AND = 57402
const NOT = 57403
const BETWEEN = 57404
const CASE = 57405
const WHEN = 57406
const THEN = 57407
const ELSE = 57408
const END = 57409
const TO = 57410
const TRIM = 57411
const EQ = 57412
const NE = 57413
const LT = 57414
const LE = 57415
const GT = 57416
const GE = 57417
const SIMILAR = 57418
const REGEXP_MATCH_CI = 57419
const ILIKE = 57420
const LIKE = 57421
const IN = 57422
const IS = 57423
const OVER = 57424
const FILTER = 57425
const SHIFT_LEFT_LOGICAL = 57426
const SHIFT_RIGHT_ARITHMETIC = 57427
const SHIFT_RIGHT_LOGICAL = 57428
const CONCAT = 57429
const APPEND = 57430
const NEGATION_PRECEDENCE = 57431
const NUMBER = 57432
const ION = 57433
const STRING = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"UNPIVOT",
	"AT",
	"PARTITION",
	"VALUE",
	"LEADING",
	"TRAILING",
	"BOTH",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"APPROX_COUNT_DISTINCT",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"TRIM",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 364,
	66, 74,
	67, 74,
	69, 74,
	70, 74,
	71, 74,
	79, 74,
	80, 74,
	81, 74,
	82, 74,
	83, 74,
	84, 74,
	-2, 129,
}

const yyPrivate = 57344

const yyLast = 2009

var yyAct = [...]int16{
	15, 358, 362, 335, 317, 348, 310, 271, 177, 288,
	13, 212, 124, 18, 102, 119, 207, 9, 195, 14,
	113, 286, 8, 40, 120, 232, 231, 229, 228, 226,
	46, 44, 45, 47, 107, 108, 109, 149, 148, 111,
	146, 114, 117, 61, 62, 63, 65, 64, 66, 67,
	68, 69, 70, 71, 72, 145, 68, 69, 70, 71,
	72, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 123, 127, 43, 49, 48, 150,
	151, 152, 153, 154, 155, 196, 197, 162, 163, 103,
	171, 172, 105, 176, 178, 180, 181, 289, 156, 105,
	31, 160, 187, 318, 178, 7, 230, 11, 71, 72,
	147, 241, 193, 174, 227, 175, 58, 159, 161, 158,
	157, 92, 209, 164, 167, 168, 166, 198, 260, 259,
	369, 165, 178, 202, 382, 233, 235, 236, 234, 197,
	225, 104, 205, 210, 246, 284, 223, 206, 104, 32,
	203, 336, 224, 204, 269, 268, 324, 129, 130, 189,
	190, 191, 22, 23, 28, 27, 24, 29, 25, 26,
	237, 246, 257, 170, 321, 242, 243, 246, 245, 126,
	20, 19, 8, 40, 283, 129, 41, 270, 42, 256,
	46, 44, 45, 47, 261, 238, 246, 35, 34, 211,
	21, 201, 186, 56, 265, 194, 30, 55, 267, 258,
	251, 250, 249, 264, 273, 50, 6, 341, 319, 352,
	131, 266, 122, 121, 106, 101, 8, 55, 33, 100,
	99, 98, 97, 96, 274, 275, 43, 49, 48, 95,
	94, 285, 55, 93, 90, 293, 89, 294, 295, 290,
	297, 298, 299, 300, 53, 301, 302, 296, 185, 291,
	63, 65, 64, 66, 67, 68, 69, 70, 71, 72,
	309, 184, 128, 183, 304, 305, 182, 308, 62, 63,
	65, 64, 66, 67, 68, 69, 70, 71, 72, 313,
	51, 280, 315, 322, 278, 320, 281, 316, 314, 279,
	262, 263, 282, 277, 331, 66, 67, 68, 69, 70,
	71, 72, 337, 276, 339, 306, 199, 380, 381, 377,
	334, 340, 307, 338, 200, 52, 344, 345, 129, 12,
	10, 343, 218, 220, 221, 217, 219, 4, 222, 359,
	349, 311, 347, 353, 216, 365, 350, 312, 354, 336,
	272, 363, 364, 342, 357, 213, 252, 126, 115, 5,
	214, 367, 188, 91, 215, 361, 178, 208, 360, 118,
	363, 116, 375, 374, 373, 125, 379, 378, 368, 32,
	169, 376, 370, 3, 2, 38, 36, 37, 110, 17,
	112, 173, 22, 23, 28, 27, 24, 29, 25, 26,
	54, 39, 1, 0, 0, 0, 0, 332, 333, 0,
	20, 19, 8, 40, 0, 0, 41, 0, 42, 0,
	46, 44, 45, 47, 0, 0, 0, 35, 34, 0,
	21, 0, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 33, 16,
	0, 0, 0, 0, 0, 0, 43, 49, 48, 22,
	23, 28, 27, 24, 29, 25, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 20, 19, 8,
	40, 0, 0, 41, 0, 42, 0, 46, 44, 45,
	47, 0, 0, 0, 35, 34, 0, 21, 0, 0,
	0, 0, 0, 30, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 33, 179, 0, 0, 0,
	0, 0, 0, 43, 49, 48, 22, 23, 28, 27,
	24, 29, 25, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 19, 8, 40, 0, 192,
	41, 0, 42, 0, 46, 44, 45, 47, 0, 0,
	0, 35, 34, 0, 21, 0, 0, 0, 0, 0,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 0, 33, 179, 0, 0, 0, 0, 0, 0,
	43, 49, 48, 22, 23, 28, 27, 24, 29, 25,
	26, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 20, 19, 8, 40, 0, 0, 41, 0, 42,
	0, 46, 44, 45, 47, 0, 0, 0, 35, 34,
	0, 21, 0, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 253, 0, 0, 0, 0, 0, 0, 33,
	179, 87, 86, 0, 76, 85, 84, 43, 49, 48,
	0, 0, 0, 0, 78, 79, 80, 81, 82, 83,
	75, 77, 73, 74, 59, 88, 0, 115, 60, 61,
	62, 63, 65, 64, 66, 67, 68, 69, 70, 71,
	72, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 22, 23, 28, 27, 24, 29,
	25, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 20, 19, 8, 40, 0, 0, 41, 0,
	42, 0, 46, 44, 45, 47, 0, 0, 0, 35,
	34, 0, 21, 0, 0, 0, 0, 0, 30, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 43, 49,
	48, 22, 23, 28, 27, 24, 29, 25, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 20,
	19, 8, 40, 0, 0, 41, 0, 42, 0, 46,
	44, 45, 47, 0, 0, 0, 35, 34, 0, 21,
	371, 372, 0, 0, 0, 30, 75, 77, 73, 74,
	59, 88, 0, 0, 60, 61, 62, 63, 65, 64,
	66, 67, 68, 69, 70, 71, 72, 33, 0, 0,
	0, 0, 0, 0, 0, 43, 49, 48, 0, 0,
	0, 87, 86, 0, 76, 85, 84, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 80, 81, 82, 83,
	75, 77, 73, 74, 59, 88, 0, 0, 60, 61,
	62, 63, 65, 64, 66, 67, 68, 69, 70, 71,
	72, 240, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 86, 0, 76, 85, 84, 57, 0, 0,
	0, 0, 0, 0, 78, 79, 80, 81, 82, 83,
	75, 77, 73, 74, 59, 88, 0, 0, 60, 61,
	62, 63, 65, 64, 66, 67, 68, 69, 70, 71,
	72, 8, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 86, 0, 76, 85, 84, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 75, 77, 73, 74, 59, 88, 0, 0, 60,
	61, 62, 63, 65, 64, 66, 67, 68, 69, 70,
	71, 72, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 86, 0, 76, 85, 84, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 80, 81, 82, 83,
	75, 77, 73, 74, 59, 88, 0, 0, 60, 61,
	62, 63, 65, 64, 66, 67, 68, 69, 70, 71,
	72, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 86, 0, 76, 85, 84, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 75,
	77, 73, 74, 59, 88, 0, 0, 60, 61, 62,
	63, 65, 64, 66, 67, 68, 69, 70, 71, 72,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	86, 0, 76, 85, 84, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 80, 81, 82, 83, 75, 77,
	73, 74, 59, 88, 0, 0, 60, 61, 62, 63,
	65, 64, 66, 67, 68, 69, 70, 71, 72, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 86,
	0, 76, 85, 84, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 75, 77, 73,
	74, 59, 88, 0, 0, 60, 61, 62, 63, 65,
	64, 66, 67, 68, 69, 70, 71, 72, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 86, 0,
	76, 85, 84, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 80, 81, 82, 83, 75, 77, 73, 74,
	59, 88, 0, 0, 60, 61, 62, 63, 65, 64,
	66, 67, 68, 69, 70, 71, 72, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 86, 0, 76,
	85, 84, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 75, 77, 73, 74, 59,
	88, 0, 0, 60, 61, 62, 63, 65, 64, 66,
	67, 68, 69, 70, 71, 72, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 86, 0, 76, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 75, 77, 73, 74, 59, 88,
	0, 0, 60, 61, 62, 63, 65, 64, 66, 67,
	68, 69, 70, 71, 72, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 86, 0, 76, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 75, 77, 73, 74, 59, 88,
	0, 0, 60, 61, 62, 63, 65, 64, 66, 67,
	68, 69, 70, 71, 72, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 86, 0, 76, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 75, 77, 73, 74, 59, 88,
	0, 0, 60, 61, 62, 63, 65, 64, 66, 67,
	68, 69, 70, 71, 72, 323, 303, 0, 0, 0,
	0, 0, 0, 0, 87, 86, 0, 76, 85, 84,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 75, 77, 73, 74, 59, 88, 0,
	0, 60, 61, 62, 63, 65, 64, 66, 67, 68,
	69, 70, 71, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 86, 0, 76, 85, 84,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 75, 77, 73, 74, 59, 88, 0,
	0, 60, 61, 62, 63, 65, 64, 66, 67, 68,
	69, 70, 71, 72, 87, 86, 0, 76, 85, 84,
	0, 0, 292, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 75, 77, 73, 74, 59, 88, 0,
	0, 60, 61, 62, 63, 65, 64, 66, 67, 68,
	69, 70, 71, 72, 287, 0, 0, 248, 0, 0,
	0, 0, 0, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 87, 86, 0, 76, 85, 84, 0,
	0, 244, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 351, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 87, 86, 0, 76, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 75, 77, 73, 74, 59, 88, 0, 0,
	60, 61, 62, 63, 65, 64, 66, 67, 68, 69,
	70, 71, 72, 86, 0, 76, 85, 84, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 75, 77, 73, 74, 59, 88, 0, 0, 60,
	61, 62, 63, 65, 64, 66, 67, 68, 69, 70,
	71, 72, 76, 85, 84, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 80, 81, 82, 83, 75, 77,
	73, 74, 59, 88, 0, 0, 60, 61, 62, 63,
	65, 64, 66, 67, 68, 69, 70, 71, 72,
}

var yyPact = [...]int16{
	321, -1000, 352, 160, 172, 312, 172, 309, -1000, 358,
	239, 305, 199, 186, -1000, 937, -1000, -1000, -1000, 191,
	189, 48, 188, 185, 184, 178, 177, 176, 175, 174,
	170, 34, 169, 787, 787, 787, -1000, -1000, 787, -1000,
	710, 787, -86, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 168, 167, 351, 349, 358, 172, 172, -1000, 165,
	787, 787, 787, 787, 787, 787, 787, 787, 787, 787,
	787, 787, 787, -55, -70, 33, -72, -73, 787, 787,
	787, 787, 787, 787, -32, 32, 787, 787, 61, 72,
	787, 40, 787, 589, 787, 787, 222, 219, 217, 204,
	145, 128, -1000, 512, 172, 31, 351, -1000, 1903, 1903,
	296, 1827, 144, -1000, 1827, 312, 94, 1827, 86, -1000,
	-95, 787, 351, 142, 346, 288, 358, -1000, -1000, 41,
	-1000, 435, -51, 183, 164, 206, 206, 206, -45, -45,
	4, 4, 4, -1000, -1000, -1000, -1000, -81, -1000, -1000,
	781, 781, 781, 781, 781, 781, 47, -82, -83, 29,
	-84, -85, 1903, 1866, -1000, 73, -1000, -1000, -1000, 787,
	138, -1000, 885, 35, 787, 787, 1747, 121, 1827, -1000,
	1707, 1657, 156, 155, 154, 348, -1000, 625, 787, -1000,
	-1000, -1000, -1000, 115, 41, 70, 69, -1000, 137, 172,
	172, -1000, 358, 787, -1000, -86, -1000, 787, 98, 1827,
	130, -1000, 340, 787, 358, 358, -1000, 269, -1000, 259,
	250, 247, 258, -1000, 127, 88, -1000, -32, -1000, -1000,
	-89, -1000, -1000, -1000, -1000, -1000, -1000, 1617, 5, 5,
	-22, -1000, 1568, 1827, 787, -1000, 787, 787, 203, 787,
	787, 787, 787, -1000, 787, 787, 1528, -1000, -1000, 41,
	41, -1000, 287, 302, 171, 1827, -1000, 1827, -1000, 787,
	-1000, 328, 335, 1827, -1000, 238, -1000, -1000, -1000, 254,
	-1000, 248, -1000, -1000, -1000, -1000, -1000, 5, 12, 163,
	12, 117, 787, 1827, 1827, 1478, 99, 1429, 1379, 1329,
	1280, 1231, 1182, 787, -1000, -1000, 172, 172, 346, 1827,
	338, 787, 358, 787, -1000, -1000, 12, -1000, 162, 344,
	-1000, 5, 1827, -1000, -1000, 787, 787, -1000, -1000, -1000,
	-1000, 1133, -1000, -1000, 340, 326, 334, 1827, 151, 1787,
	-1000, 190, 787, 12, 1084, 1035, -1000, 328, 324, -22,
	787, 787, 333, 986, -1000, -1000, -1000, 338, -1000, -22,
	-1000, 74, -1000, 835, 781, 589, -1000, 326, -1000, 787,
	297, -1000, -1000, 140, 324, -1000, -1000, 294, 77, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 402, 0, 401, 13, 215, 400, 11, 6, 391,
	390, 9, 389, 388, 387, 386, 384, 383, 14, 382,
	381, 380, 100, 18, 20, 7, 10, 19, 12, 375,
	8, 371, 369, 15, 367, 17, 2, 3, 365, 364,
	5, 1, 363, 4, 362, 360,
}

var yyR1 = [...]int8{
	0, 1, 24, 6, 6, 16, 16, 17, 17, 27,
	27, 27, 27, 27, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 10, 10, 21, 21, 35,
	35, 35, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	26, 26, 34, 34, 30, 30, 30, 31, 31, 31,
	32, 32, 32, 33, 43, 43, 39, 39, 39, 39,
	39, 39, 39, 45, 45, 28, 28, 29, 29, 29,
	23, 18, 18, 18, 18, 22, 9, 9, 42, 42,
	11, 11, 7, 7, 8, 8, 25, 25, 20, 20,
	20, 19, 19, 19, 36, 38, 38, 37, 37, 40,
	40, 41, 41, 12, 12, 12, 12, 13, 14, 15,
	44, 44, 44,
}

var yyR2 = [...]int8{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 0, 5,
	1, 0, 1, 7, 6, 6, 8, 4, 4, 6,
	6, 8, 8, 6, 6, 3, 4, 6, 6, 7,
	3, 4, 5, 5, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 4, 4, 5, 4, 4, 2, 2, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 3, 0,
	1, 3, 0, 3, 7, 0, 1, 2, 2, 3,
	2, 3, 2, 1, 2, 1, 0, 2, 3, 7,
	1, 0, 3, 4, 4, 1, 0, 2, 4, 5,
	0, 5, 0, 2, 0, 2, 0, 3, 0, 2,
	2, 0, 1, 1, 3, 3, 1, 0, 3, 0,
	2, 0, 2, 6, 6, 4, 4, 1, 3, 3,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -16, -17, 16, 7, 56, -22, 54, -35,
	18, -22, 20, -26, -27, -2, 101, -12, -4, 53,
	52, 72, 34, 35, 38, 40, 41, 37, 36, 39,
	78, -22, 21, 100, 70, 69, -15, -14, 27, -3,
	55, 58, 60, 108, 63, 64, 62, 65, 110, 109,
	-5, 51, 20, 55, -6, 56, 17, 20, -22, 89,
	93, 94, 95, 96, 98, 97, 99, 100, 101, 102,
	103, 104, 105, 87, 88, 85, 69, 86, 79, 80,
	81, 82, 83, 84, 71, 70, 67, 66, 90, 55,
	55, -42, 73, 55, 55, 55, 55, 55, 55, 55,
	55, 55, -18, 55, 107, 58, 55, -2, -2, -2,
	-13, -2, -10, -24, -2, 7, -31, -2, -32, -33,
	110, 55, 55, -24, -28, -29, 8, -27, -5, -22,
	-22, 55, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 110, 110, 77, 110, 110,
	-2, -2, -2, -2, -2, -2, -4, 88, 87, 85,
	69, 86, -2, -2, 62, 70, 65, 63, 64, -21,
	101, 18, -2, -9, 73, 75, -2, -30, -2, 101,
	-2, -2, 54, 54, 54, 54, 57, -2, -44, 31,
	32, 33, 57, -30, -22, -23, 54, 108, -24, 20,
	28, 57, -35, 56, 59, 56, 61, 111, -34, -2,
	-24, 57, -7, 9, -45, -39, 56, 47, 44, 48,
	45, 46, 50, -27, -24, -30, 110, 67, 110, 110,
	77, 110, 110, 62, 65, 63, 64, -2, 57, 57,
	56, 76, -2, -2, 74, 57, 56, 56, 20, 56,
	56, 56, 8, 57, 56, 8, -2, 57, -18, 59,
	59, 57, -22, -22, -26, -2, -33, -2, 57, 56,
	57, -25, 10, -2, -27, -27, 44, 44, 44, 49,
	44, 49, 44, 57, 57, -4, 110, 57, -11, 92,
	-11, -23, 74, -2, -2, -2, 54, -2, -2, -2,
	-2, -2, -2, 8, -18, -18, 28, 20, -28, -2,
	-8, 13, 12, 51, 44, 44, -11, -43, 91, 55,
	-43, 57, -2, 57, 57, 56, 56, 57, 57, 57,
	57, -2, -22, -22, -7, -37, 11, -2, -26, -2,
	-43, 55, 9, -11, -2, -2, 57, -25, -40, 14,
	12, 79, 29, -2, -43, 57, 57, -8, -41, 15,
	-23, -38, -36, -2, -2, 12, 57, -37, -23, 56,
	-19, 25, 26, -30, -40, -36, -20, 22, -37, -41,
	23, 24, 57,
}

var yyDef = [...]int16{
	6, -2, 0, 5, 0, 31, 0, 0, 135, 0,
	30, 0, 0, 4, 100, 11, 12, 13, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 98, 99, 0, 23,
	0, 109, 112, 15, 16, 17, 18, 19, 20, 21,
	22, 0, 0, 0, 126, 0, 0, 0, 10, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 0, 0, 0, 0, 68, 86, 87,
	0, 167, 0, 25, 26, 31, 0, 107, 0, 110,
	0, 0, 0, 0, 142, 125, 0, 101, 3, 131,
	9, 0, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 69, 70, 0, 72, 73,
	74, 75, 76, 77, 78, 79, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 0, 92, 94, 96, 0,
	0, 27, 0, 0, 0, 0, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 170,
	171, 172, 50, 0, 131, 0, 0, 130, 0, 0,
	0, 24, 0, 0, 169, 0, 168, 0, 0, 102,
	0, 7, 146, 0, 0, 0, 123, 0, 116, 0,
	0, 0, 0, 127, 0, 0, 71, 0, 81, 82,
	0, 84, 85, 91, 93, 95, 97, 0, 140, 140,
	0, 37, 0, 137, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 51, 132, 131,
	131, 54, 165, 166, 126, 108, 111, 113, 29, 0,
	8, 144, 0, 143, 128, 0, 124, 117, 118, 0,
	120, 0, 122, 52, 53, 80, 83, 140, 115, 0,
	115, 0, 0, 138, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 134, 0, 0, 142, 103,
	157, 0, 0, 0, 119, 121, 115, 34, 0, 0,
	35, 140, 139, 39, 40, 0, 0, 43, 44, 47,
	48, 0, 163, 164, 146, 159, 0, 145, 147, 0,
	33, 0, 0, 115, 0, 0, 49, 144, 161, 0,
	0, 0, 0, 0, 36, 41, 42, 157, 1, 0,
	160, 158, 156, 151, -2, 0, 141, 159, 162, 0,
	148, 152, 153, 157, 161, 155, 154, 0, 0, 2,
	149, 150, 114,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 103, 95, 3,
	55, 57, 101, 99, 56, 100, 107, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 111, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 58, 3, 59, 94, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 60, 93, 61, 69,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 62, 63, 64, 65, 66, 67, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 96, 97, 98, 104, 105, 106, 108, 109,
	110,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:122
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			distinct, distinctExpr := decodeDistinct(yyDollar[3].values)
			yylex.(*scanner).result = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:131
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:137
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:137
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:140
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:140
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:143
		{
			yyVAL.with = []expr.CTE{{Table: yyDollar[2].str, As: yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:144
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{Table: yyDollar[3].str, As: yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:150
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:151
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:152
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:153
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:154
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:157
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:162
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:163
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:164
		{
			yyVAL.expr = expr.Null{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:165
		{
			yyVAL.expr = expr.Missing{}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:166
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:167
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:168
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:184
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:188
		{
			yyVAL.yesno = true
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:188
		{
			yyVAL.yesno = false
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:191
		{
			yyVAL.values = yyDollar[4].values
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:192
		{
			yyVAL.values = []expr.Node{}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:193
		{
			yyVAL.values = nil
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:203
		{
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:211
		{
			distinct := false
			agg, err := toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:220
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, expr.ApproxCountDistinctDefaultPrecision, yyDollar[5].expr, yyDollar[6].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:228
		{
			agg, err := createApproxCountDistinct(yyDollar[3].expr, yyDollar[5].integer, yyDollar[7].expr, yyDollar[8].wind)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = agg
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:236
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:240
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:244
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:248
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
			}
			yyVAL.expr = nod
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:256
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:264
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:272
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:280
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:288
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:292
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, nil)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:300
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[3].expr, yyDollar[5].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:308
		{
			node, err := createTrimInvocation(trimBoth, yyDollar[5].expr, yyDollar[3].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:316
		{
			node, err := createTrimInvocation(yyDollar[3].integer, yyDollar[6].expr, yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.expr = node
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:324
		{
			op := expr.Call(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:332
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:340
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:344
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:348
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:352
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:356
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:360
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:364
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:368
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:372
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:376
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:380
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:384
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:388
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:392
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:396
		{
			yyVAL.expr = expr.CallOp(expr.Concat, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:400
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:404
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:408
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:412
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:416
		{
			yyVAL.expr = expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[4].str))
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:420
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:424
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:428
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:432
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:436
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:440
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:444
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:448
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:452
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:456
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:460
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:464
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[5].str))}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:468
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:472
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:476
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:480
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:484
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:488
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:492
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:496
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:500
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:504
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:508
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:512
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:516
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:520
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:525
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:536
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:537
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:541
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:542
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:546
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:547
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:548
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:552
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:553
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:554
		{
			yyVAL.values = nil
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:558
		{
			yyVAL.values = yyDollar[1].values
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:559
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].values...)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:560
		{
			yyVAL.values = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:564
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:568
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:571
		{
			yyVAL.wind = nil
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:574
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:575
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:576
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:577
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:578
		{
			yyVAL.jk = expr.RightJoin
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:579
		{
			yyVAL.jk = expr.RightJoin
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:580
		{
			yyVAL.jk = expr.FullJoin
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:585
		{
			yyVAL.from = yyDollar[1].from
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:586
		{
			yyVAL.from = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:593
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:594
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 129:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:596
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:599
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:602
		{
			yyVAL.pc = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:603
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:604
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:605
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:614
		{
			yyVAL.str = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:617
		{
			yyVAL.expr = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:618
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:621
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:622
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:625
		{
			yyVAL.expr = nil
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:626
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:629
		{
			yyVAL.expr = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:630
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:633
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:634
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:637
		{
			yyVAL.bindings = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:638
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:642
		{
			yyVAL.yesno = false
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:643
		{
			yyVAL.yesno = false
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:644
		{
			yyVAL.yesno = true
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:648
		{
			yyVAL.yesno = false
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:649
		{
			yyVAL.yesno = false
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:650
		{
			yyVAL.yesno = true
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:654
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:657
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:658
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:661
		{
			yyVAL.orders = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:662
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:665
		{
			yyVAL.exprint = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:666
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:669
		{
			yyVAL.exprint = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:670
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:673
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			at := yyDollar[6].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:674
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[6].str
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: &at}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:675
		{ /*Cloning, as the buffer gets overwritten*/
			as := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: &as, At: nil}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:676
		{ /*Cloning, as the buffer gets overwritten*/
			at := yyDollar[4].str
			yyVAL.expr = &expr.Unpivot{TupleRef: yyDollar[2].expr, As: nil, At: &at}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:679
		{
			yyVAL.expr = &expr.Table{Binding: expr.Bind(yyDollar[1].expr, "")}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:682
		{
			yyVAL.expr = expr.Call("MAKE_STRUCT", yyDollar[2].values...)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:685
		{
			yyVAL.expr = expr.Call("MAKE_LIST", yyDollar[2].values...)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:688
		{
			yyVAL.integer = trimLeading
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:689
		{
			yyVAL.integer = trimTrailing
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:690
		{
			yyVAL.integer = trimBoth
		}
	}
	goto yystack /* stack new state and value */
}
