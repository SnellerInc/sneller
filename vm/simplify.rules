// logical rules:
(and.k (init) x) -> x
(and.k x (init)) -> x
(and.k _ f:(false)) -> f
(and.k f:(false) _) -> f
(and.k x x) -> x


// for most ops, the 'and' of an op result and its input mask
// will be equal to the result
(and.k a b), "p.mask(a) == b && !ssainfo[a.op].disjunctive" -> a
(and.k a b), "p.mask(b) == a && !ssainfo[b.op].disjunctive" -> b

// very simple short-circuiting:
//   (and (op0 ... k) (op1 ... k)) -> (op0 ... (op1 ... k))
(and.k a b), "res, ok := conjoin(p, a, b); ok" -> res

(or.k t:(init) _) -> t
(or.k _ t:(init)) -> t
(or.k (false) x) -> x
(or.k x (false)) -> x
(or.k x x) -> x

(andn.k x x) -> (false)
(andn.k _ f:(false)) -> f
(andn.k t:(init) _) -> (false)
(andn.k (false) x) -> x

// x ^ x -> false
(xor.k x x) -> (false)
// TRUE ^ x -> !x
(xor.k x t:(init)) -> (andn.k x t)
(xor.k t:(init) x) -> (andn.k x t)
(xor.k x (false)) -> x
(xor.k (false) x) -> x

// x == x -> true
(xnor.k x x) -> (init)
// x == true -> x
(xnor.k f (init)) -> f
(xnor.k (init) f) -> f
// x == false -> !x
(xnor.k f (false)) -> (andn.k f (init))
(xnor.k (false) f) -> (andn.k f (init))

// identity tuple simplifications
(make.vk val k), `p.mask(val) == k` -> val
(floatk f k), `p.mask(f) == k` -> f
// notmissing just exists for the purposes of compilation;
// it can always be removed safely:
(notmissing k) -> k

// trivial conversion
// (the use sites should have picked up
// the mask argument if they need it)
(cvt.k@i64 (init)  _) -> (broadcast.i 1)
(cvt.k@i64 (false) _) -> (broadcast.i 0)
(cvt.k@f64 (init)  _) -> (broadcast.f 1.0)
(cvt.k@f64 (false) _) -> (broadcast.f 0.0)

(cvt.i64@k (broadcast.i imm) k) -> (and.k "p.choose(imm != 0)" k)

// fold in float immediates
(add.f f (broadcast.f imm) k) -> (add.imm.f f k imm)
(add.f (broadcast.f imm) f k) -> (add.imm.f f k imm)
(sub.f f (broadcast.f imm) k) -> (sub.imm.f f k imm)
(sub.f (broadcast.f imm) f k) -> (rsub.imm.f f k imm)
(mul.f f (broadcast.f imm) k) -> (mul.imm.f f k imm)
(mul.f (broadcast.f imm) f k) -> (mul.imm.f f k imm)
(div.f f (broadcast.f imm) k) -> (div.imm.f f k imm)
(div.f (broadcast.f imm) f k) -> (rdiv.imm.f f k imm)

// x == x, x <= x, x >= x -> true
("^cmp(eq|le|ge)\\.(i64|f64)$" x x k) -> k

// identity fp math (uses should already be aware of mask)
("^(add|sub).imm.f$" f _ 0.0) -> f
(mul.imm.f f _ 1.0) -> f
(rsub.imm.f f k 0.0) -> (neg.f f k)
// identity integer math
(mul.imm.i i _ 1) -> i
(rsub.imm.i i k 0) -> (neg.i i k)
("^(add|sub|or|srl|sra|sll).imm.i$" i _ 0) -> i

// aggregates with the empty mask produce
// no interesting side-effects:
("^agg(and|or|sum|min|max|xor).*" mem _ (false) _) -> mem
(aggcount mem (false) _) -> mem
("^aggslot(and|or|sum|min|max|xor).*" mem _ _ (false) _) -> mem
(aggslotcount mem _ (false) _) -> mem
("^aggslotapprox.*" mem _ _ (false) _) -> mem
("^aggapprox.*" mem (false) _) -> mem

// trivial mergemem reduction
(mergemem x) -> x

// blend simplifications
("blend.v" x k _ (false)) -> (make.vk x k)
("blend.v" _ _ y (init)) -> (make.vk y (init))
("blend.v" _ (false) y k) -> (make.vk y k)

// boxing simplifications
(boxfloat (broadcast.f lit) _) -> (literal lit)
(boxint (broadcast.i lit) _) -> (literal lit)
(boxts (broadcast.ts lit) _), "ts := date.UnixMicro(int64(lit)); true" -> (literal ts)

// make a store with k=false not depend on the input value
(store.v mem ov k:(false) slot), "ov != k" -> (store.v mem k k slot)
