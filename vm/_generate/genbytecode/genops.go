// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package main

import (
	"fmt"
	"io"
)

func writeOpcodeConstants(f io.Writer, opcodes []Opcode, byopcode map[string]int) error {
	write := func(s string, args ...any) {
		fmt.Fprintf(f, s, args...)
		fmt.Fprintf(f, "\n")
	}

	write("")
	write("const (")

	for i := range opcodes {
		write("\t%s bcop = %d", opcodes[i].goconst(), i)
	}

	write("\t%s = %d", "_maxbcop", len(opcodes))
	write(")")

	write("")
	write("type opreplace struct {from, to bcop}")
	write("var patchAVX512Level2 []opreplace = []opreplace{")
	for i := range opcodes {
		proc := &opcodes[i]
		if !proc.isVariant() {
			continue
		}
		id, ok := byopcode[proc.baseOpcode()]
		if !ok {
			return fmt.Errorf("can't find base name")
		}
		base := &opcodes[id]
		write("\t{from: %s, to: %s},", proc.goconst(), base.goconst())
	}
	write("}")

	return nil
}

func writeAsmTable(f io.Writer, opcodes []Opcode) {
	write := func(s string, args ...any) {
		fmt.Fprintf(f, s, args...)
		fmt.Fprintf(f, "\n")
	}

	write(`#include "textflag.h"`)
	write("")
	write(autogenerated)
	write("")

	const data = "opaddrs"
	const trap = "trap"

	offset := 0
	for i := range opcodes {
		write("DATA %s+0x%03x(SB)/8, $bc%s(SB)", data, offset, opcodes[i].name)
		offset += 8
	}

	k := len(opcodes)
	n := nextPower(len(opcodes))
	for i := k; i < n; i++ {
		write("DATA %s+0x%03x(SB)/8, $bc%s(SB)", data, offset, trap)
		offset += 8
	}

	write("GLOBL %s(SB), RODATA|NOPTR, $0x%04x", data, offset)
}

func nextPower(x int) int {
	n := 1
	for n < x {
		n *= 2
	}

	return n
}
