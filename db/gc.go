// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package db

import (
	"errors"
	"fmt"
	"io/fs"
	"path"
	"sync"
	"time"

	"github.com/SnellerInc/sneller/date"
	"github.com/SnellerInc/sneller/fsutil"
	"github.com/SnellerInc/sneller/ion/blockfmt"
)

// RemoveFS is an fs.FS with a Remove operation.
type RemoveFS interface {
	fs.FS
	Remove(name string) error
}

var (
	_ RemoveFS = &S3FS{}
	_ RemoveFS = &DirFS{}
)

const (
	// DefaultMinimumAge is the default minimum
	// age of packed-* files to be deleted.
	DefaultMinimumAge = 15 * time.Minute
	// DefaultInputMinimumAge is the default
	// minimuma ge of inputs-* files to be deleted.
	DefaultInputMinimumAge = 30 * time.Second
)

// GCConfig is a configuration for
// garbage collection.
type GCConfig struct {
	// MinimumAge, if non-zero, specifies
	// the minimum age for any objects removed
	// during a garbage-collection pass.
	// Note that objects are only candidates
	// for garbage collection if they are older
	// than the current index *and* not pointed to
	// by the current index, so the MinimumAge requirement
	// is only necessary if it is possible for GC and ingest
	// to run simultaneously. In that case, MinimumAge should be
	// set to some duration longer than any possible ingest cycle.
	MinimumAge      time.Duration
	InputMinimumAge time.Duration

	// Logf, if non-nil, is a callback used for logging
	// detailed information regarding GC decisions.
	Logf func(f string, args ...interface{})

	// Precise determines if GC is performed
	// by only deleting objects that have been
	// explicitly marked for deletion.
	Precise bool
}

func (c *GCConfig) logf(f string, args ...interface{}) {
	// let `go vet` know this is printf-like
	if false {
		_ = fmt.Sprintf(f, args...)
	}
	if c.Logf != nil {
		c.Logf(f, args...)
	}
}

const (
	// this is the pattern we reserve for objects
	// that are generated by ingest and can be garbage collected;
	// perhaps this should be adjusted down the road...
	packedPattern = "packed-*"
	inputsPattern = "inputs-*"
)

// Run calls rfs.Remove(path) for each path
// within the provided database name and table
// that a) has a filename pattern that indicates
// it was packed by Sync, at b) is not pointed to
// by idx.
func (c *GCConfig) Run(rfs RemoveFS, dbname string, idx *blockfmt.Index) error {
	if c.Precise {
		c.preciseGC(rfs, idx)
	}

	// pin relative time to start time,
	// since we don't want to look at
	// anything that has been written since
	// the GC operation actually started
	start := time.Now()
	used := make(map[string]struct{})
	for i := range idx.Inline {
		used[idx.Inline[i].Path] = struct{}{}
	}
	ifs, ok := rfs.(blockfmt.InputFS)
	if !ok {
		return fmt.Errorf("cannot scan indirect inputs using %T", rfs)
	}
	descs, err := idx.Indirect.Search(ifs, nil)
	if err != nil {
		return err
	}
	for i := range descs {
		used[descs[i].Path] = struct{}{}
	}
	idx.Inputs.EachFile(func(f string) {
		used[f] = struct{}{}
	})
	type spec struct {
		pattern string
		minAge  time.Duration
	}

	packedmin := c.MinimumAge
	if packedmin <= 0 {
		packedmin = DefaultMinimumAge
	}
	inputmin := c.InputMinimumAge
	if inputmin <= 0 {
		inputmin = DefaultInputMinimumAge
	}
	specs := []spec{
		// queries can use packed files during execution,
		// so don't delete them until they are fairly old
		{packedPattern, packedmin},
		// inputs can really only be referenced by
		// the index, more-or-less as soon as an index
		// becomes visible, the old inputs can be deleted
		{inputsPattern, inputmin},
	}
	match := func(name string) *spec {
		for i := range specs {
			ok, _ := path.Match(specs[i].pattern, name)
			if ok {
				return &specs[i]
			}
		}
		return nil
	}
	walk := func(p string, d fsutil.DirEntry, err error) error {
		if err != nil || d.IsDir() {
			return err
		}
		spc := match(d.Name())
		if spc == nil {
			return nil
		}
		if _, ok := used[p]; ok {
			c.logf("%s is referenced", p)
			return nil
		}
		info, err := d.Info()
		if errors.Is(err, fs.ErrNotExist) {
			c.logf("%s: ignoring; already removed", p)
			return nil
		} else if err != nil {
			c.logf("%s: %v", p, err)
			return err
		}
		if info.ModTime().After(idx.Created.Time()) {
			// if, due to some kind of synchronization failure,
			// we are running an ingest at the same time that
			// we are runing GC, then new files will be introduced
			// that are not yet pointed to by an index; we shouldn't
			// remove them since they could still be used by a future
			// index
			c.logf("%s: ignoring; newer than index", p)
			return nil
		}
		if spc.minAge != 0 && start.Sub(info.ModTime()) < spc.minAge {
			c.logf("%s: ignoring; does not meet minimum age", p)
			return nil
		}
		if rmerr := rfs.Remove(p); rmerr != nil {
			c.logf("%s/%s: %s", dbname, idx.Name, err)
		} else {
			c.logf("removed %s", p)
		}
		return nil
	}
	return fsutil.WalkDir(rfs, path.Join("db", dbname, idx.Name), "", "", walk)
}

// preciseGC removes expired elements from idx.ToDelete
// and returns true if any items were removed, or otherwise false
func (c *GCConfig) preciseGC(rfs RemoveFS, idx *blockfmt.Index) bool {
	if len(idx.ToDelete) == 0 {
		return false
	}
	saved := idx.ToDelete[:0]
	now := date.Now()
	var failed chan blockfmt.Quarantined
	var wg sync.WaitGroup
	for i := range idx.ToDelete {
		if idx.ToDelete[i].Expiry.After(now) {
			saved = append(saved, idx.ToDelete[i])
			continue
		}
		x := idx.ToDelete[i]
		if failed == nil {
			failed = make(chan blockfmt.Quarantined, 1)
		}
		wg.Add(1)
		go func() {
			defer wg.Done()
			err := rfs.Remove(x.Path)
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				c.logf("deleting ToDelete %q: %s", x.Path, err)
				failed <- x
			}
		}()
	}
	// didn't remove anything:
	if failed == nil {
		return false
	}
	go func() {
		wg.Wait()
		close(failed)
	}()
	for x := range failed {
		saved = append(saved, x)
	}
	idx.ToDelete = saved
	return true
}
