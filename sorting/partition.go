// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package sorting

// Code generated by generator.go; DO NOT EDIT.

// partitionAscFloat64 performs partition algorithm for given pair of keys
// and indices and the pivot value.
//
// Partition splits input data into two sets: 1) keys less or equal to the
// pivot and 2) keys greater or equal to the pivot.
//
// The procedure takes into account values in range [left:right] (it's a
// closed interval). Returns a subrange which wasn't partitioned. The
// subrange has to be processed further by a scalar procedure.
//
// Preconditions:
// 1. [left:right] forms a non-empty range,
// 2. all keys must not be strictly less nor strictly greater than the pivot.
//
// Postconditions:
//  1. none of keys on the left (before `unprocessed_left`)
//     is greater than the pivot;
//  2. none of keys on the right (after `unprocessed_right`)
//     is less than the pivot.
//
// go:noescape
func partitionAscFloat64(keys *float64, indices *uint64, pivot float64, left int, right int) (unprocessedLeft int, unprocessedRight int)

// partitionDescFloat64 performs partition algorithm for given pair of keys
// and indices and the pivot value.
//
// Partition splits input data into two sets: 1) keys less or equal to the
// pivot and 2) keys greater or equal to the pivot.
//
// The procedure takes into account values in range [left:right] (it's a
// closed interval). Returns a subrange which wasn't partitioned. The
// subrange has to be processed further by a scalar procedure.
//
// Preconditions:
// 1. [left:right] forms a non-empty range,
// 2. all keys must not be strictly less nor strictly greater than the pivot.
//
// Postconditions:
//  1. none of keys on the left (before `unprocessed_left`)
//     is greater than the pivot;
//  2. none of keys on the right (after `unprocessed_right`)
//     is less than the pivot.
//
// go:noescape
func partitionDescFloat64(keys *float64, indices *uint64, pivot float64, left int, right int) (unprocessedLeft int, unprocessedRight int)

// partitionAscUint64 performs partition algorithm for given pair of keys
// and indices and the pivot value.
//
// Partition splits input data into two sets: 1) keys less or equal to the
// pivot and 2) keys greater or equal to the pivot.
//
// The procedure takes into account values in range [left:right] (it's a
// closed interval). Returns a subrange which wasn't partitioned. The
// subrange has to be processed further by a scalar procedure.
//
// Preconditions:
// 1. [left:right] forms a non-empty range,
// 2. all keys must not be strictly less nor strictly greater than the pivot.
//
// Postconditions:
//  1. none of keys on the left (before `unprocessed_left`)
//     is greater than the pivot;
//  2. none of keys on the right (after `unprocessed_right`)
//     is less than the pivot.
//
// go:noescape
func partitionAscUint64(keys *uint64, indices *uint64, pivot uint64, left int, right int) (unprocessedLeft int, unprocessedRight int)

// partitionDescUint64 performs partition algorithm for given pair of keys
// and indices and the pivot value.
//
// Partition splits input data into two sets: 1) keys less or equal to the
// pivot and 2) keys greater or equal to the pivot.
//
// The procedure takes into account values in range [left:right] (it's a
// closed interval). Returns a subrange which wasn't partitioned. The
// subrange has to be processed further by a scalar procedure.
//
// Preconditions:
// 1. [left:right] forms a non-empty range,
// 2. all keys must not be strictly less nor strictly greater than the pivot.
//
// Postconditions:
//  1. none of keys on the left (before `unprocessed_left`)
//     is greater than the pivot;
//  2. none of keys on the right (after `unprocessed_right`)
//     is less than the pivot.
//
// go:noescape
func partitionDescUint64(keys *uint64, indices *uint64, pivot uint64, left int, right int) (unprocessedLeft int, unprocessedRight int)
