// // Copyright (C) 2022 Sneller, Inc.
// // This program is free software: you can redistribute it and/or modify
// // it under the terms of the GNU Affero General Public License as published by
// // the Free Software Foundation, either version 3 of the License, or
// // (at your option) any later version.
// //
// // This program is distributed in the hope that it will be useful,
// // but WITHOUT ANY WARRANTY; without even the implied warranty of
// // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// // GNU Affero General Public License for more details.
// //
// // You should have received a copy of the GNU Affero General Public License
// // along with this program.  If not, see <http://www.gnu.org/licenses/>.

// package proxy_http

// import (
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"
// 	"strings"
// 	"sync/atomic"
// )

// type logRoundTripper struct {
// 	http.RoundTripper
// 	DumpHeaders, DumpBody bool
// 	req                   int64
// }

// func (rt *logRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
// 	reqNr := atomic.AddInt64(&rt.req, 1)

// 	var sbReq strings.Builder
// 	fmt.Fprintf(&sbReq, "#%d: %s %s\n", reqNr, req.Method, req.URL.String())
// 	if rt.DumpHeaders {
// 		for h, v := range req.Header {
// 			fmt.Fprintf(&sbReq, ">> %s: %s\n", h, strings.Join(v, ","))
// 		}
// 	}

// 	baseTransport := rt.RoundTripper
// 	if baseTransport == nil {
// 		baseTransport = http.DefaultTransport
// 	}

// 	if rt.DumpBody && req.Body != nil {
// 		orgBody := req.Body
// 		req.Body = NewReaderCloser(io.TeeReader(orgBody, &sbReq), func() error {
// 			log.Println(sbReq.String())
// 			return orgBody.Close()
// 		})
// 	} else {
// 		log.Print(sbReq.String())
// 	}
// 	resp, err := baseTransport.RoundTrip(req)

// 	if resp != nil {
// 		var sbResp strings.Builder
// 		fmt.Fprintf(&sbResp, "#%d: %s\n", reqNr, resp.Status)
// 		if rt.DumpHeaders {
// 			for h, v := range resp.Header {
// 				fmt.Fprintf(&sbResp, "<< %s: %s\n", h, strings.Join(v, ","))
// 			}
// 		}
// 		if rt.DumpBody && resp.Body != nil {
// 			orgBody := resp.Body
// 			resp.Body = NewReaderCloser(io.TeeReader(orgBody, &sbResp), func() error {
// 				log.Println(sbResp.String())
// 				return orgBody.Close()
// 			})
// 		} else {
// 			log.Print(sbResp.String())
// 		}
// 	}

// 	return resp, err
// }
